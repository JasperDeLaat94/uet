"Build and Test Libraries on Windows":
  stage: Build Libraries
  tags:
    - redpoint-games-windows
  needs:
    - Timestamp
    - "Build Win OpenGE Shim"
    - "Build Mac OpenGE Shim"
    - "Build Linux OpenGE Shim"
    - "Build Mac Logging"
    - "Build AutoDiscovery"
  interruptible: true
  script: |
    $PackageVersion = (Get-Content -Raw -Path "package.version").Trim()
    dotnet build -c Release /p:PackageVersion=$PackageVersion /p:OpenGEShimRuntimeIdentifier=all /p:OpenGEShimIsAlreadyBuilt=true UET/UET.sln
    if ($LastExitCode -ne 0) {
      Write-Host "dotnet build (UET.sln) failed with exit code $LastExitCode"
      exit $LastExitCode 
    }
    dotnet test --no-build --logger:"console" --logger:"junit;LogFilePath=$((Get-Location).Path)\TestResults\{assembly}.test-result.xml" -c Release /p:PackageVersion=$PackageVersion UET/UET.sln
    if ($LastExitCode -ne 0) {
      Write-Host "dotnet test (UET.sln) failed with exit code $LastExitCode"
      exit $LastExitCode 
    }
  artifacts:
    reports:
      junit: TestResults/*.test-result.xml
    paths:
      - "**/*.nupkg"

"Build and Test Libraries on macOS":
  stage: Build Libraries
  tags:
    - redpoint-games-mac
  needs:
    - Timestamp
    - "Build Win OpenGE Shim"
    - "Build Mac OpenGE Shim"
    - "Build Linux OpenGE Shim"
    - "Build Mac Logging"
    - "Build AutoDiscovery"
  interruptible: true
  script: |
    PACKAGE_VERSION=$(cat package.version | tr -d '\n')
    echo "Package version: $PACKAGE_VERSION"
    dotnet build -c Release /p:PackageVersion=$PACKAGE_VERSION /p:OpenGEShimRuntimeIdentifier=all /p:OpenGEShimIsAlreadyBuilt=true UET/UET.sln
    dotnet test --no-build --logger:"console" --logger:"junit;LogFilePath=$(pwd)/TestResults/{assembly}.test-result.xml" -c Release /p:PackageVersion=$PackageVersion UET/UET.sln
  artifacts:
    reports:
      junit: TestResults/*.test-result.xml