stages:
  - Timestamp
  - Prebuild
  - Build Pass 1
  - Build Libraries
  - Build Pass 2
  - Publish
  - End

"Timestamp":
  stage: Timestamp
  tags:
    - redpoint-games-windows
  interruptible: true
  script: |
    $Timestamp = ([DateTime]::UtcNow)
    $PackageVersion = "$($Timestamp.Year).$($Timestamp.DayOfYear + 1000).$(($Timestamp.Hour * 60) + $Timestamp.Minute)"
    Set-Content -NoNewline -Path "package.version" -Value "$PackageVersion"
  artifacts:
    paths:
      - package.version

"Build OpenGE Shim":
  stage: Prebuild
  tags:
    - redpoint-games-windows
  needs:
    - Timestamp
  interruptible: true
  script: |
    $PackageVersion = (Get-Content -Raw -Path "package.version").Trim()
    dotnet msbuild -restore -t:Publish -p:RuntimeIdentifier=win-x64 -p:Configuration=Release -p:BaseUetVersion=$PackageVersion -p:PackageVersion=$PackageVersion "-p:OutDir=$((Get-Location).Path)\UET\Redpoint.OpenGE.ProcessExecution\shim-bin\Release\net7.0\win-x64" "-p:PublishDir=$((Get-Location).Path)\UET\Redpoint.OpenGE.ProcessExecution\shim-bin\Release\net7.0\win-x64\publish" UET/Redpoint.OpenGE.Shim/Redpoint.OpenGE.Shim.csproj
    if ($LastExitCode -ne 0) {
      Write-Host "Publish win-x64 (Redpoint.OpenGE.Shim.csproj) failed with exit code $LastExitCode"
      exit $LastExitCode 
    }
  artifacts:
    paths:
      - "UET/Redpoint.OpenGE.ProcessExecution/shim-bin/Release/net7.0/win-x64/publish"

"Build Mac Logging":
  stage: Prebuild
  tags:
    - redpoint-games-mac
  needs:
    - Timestamp
  interruptible: true
  script: |
    PACKAGE_VERSION=$(cat package.version | tr -d '\n')
    echo "Package version: $PACKAGE_VERSION"
    dotnet msbuild -t:BuildNativeMacLibraries -p:Configuration=Release -p:BaseUetVersion=$PACKAGE_VERSION -p:PackageVersion=$PACKAGE_VERSION UET/Redpoint.Logging.Mac/Redpoint.Logging.Mac.csproj
    dotnet msbuild -t:BuildAndReferenceNupkg -p:Configuration=Release -p:BaseUetVersion=$PACKAGE_VERSION -p:PackageVersion=$PACKAGE_VERSION UET/Redpoint.Logging.Mac/Redpoint.Logging.Mac.csproj
  artifacts:
    paths:
      - "UET/Redpoint.Logging.Mac.Native/runtimes/osx.11.0-arm64/libLogging.arm64.dylib"
      - "UET/Redpoint.Logging.Mac.Native/runtimes/osx-x64/libLogging.x64.dylib"
      - "UET/Redpoint.Logging.Mac/bin/Redpoint.Logging.Mac.Native.*.nupkg"

"Build Win Pass 1":
  stage: Build Pass 1
  tags:
    - redpoint-games-windows
  needs:
    - Timestamp
    - "Build OpenGE Shim"
    - "Build Mac Logging"
  interruptible: true
  script: |
    $PackageVersion = (Get-Content -Raw -Path "package.version").Trim()
    dotnet msbuild -restore -t:Publish -p:RuntimeIdentifier=win-x64 -p:Configuration=Release -p:BaseUetVersion=$PackageVersion -p:PackageVersion=$PackageVersion -p:OpenGEShimIsAlreadyBuilt=true UET/uet/uet.csproj
    if ($LastExitCode -ne 0) {
      Write-Host "Publish win-x64 (uet.csproj) failed with exit code $LastExitCode"
      exit $LastExitCode 
    }
  artifacts:
    paths:
      - "UET/uet/bin/Release/net7.0/win-x64/publish/uet.exe"

"Build Mac Pass 1":
  stage: Build Pass 1
  tags:
    - redpoint-games-mac
  needs:
    - Timestamp
    - "Build OpenGE Shim"
    - "Build Mac Logging"
  interruptible: true
  script: |
    PACKAGE_VERSION=$(cat package.version | tr -d '\n')
    echo "Package version: $PACKAGE_VERSION"
    dotnet msbuild -restore -t:Publish -p:RuntimeIdentifier=osx.11.0-arm64 -p:Configuration=Release -p:BaseUetVersion=$PACKAGE_VERSION -p:PackageVersion=$PACKAGE_VERSION -p:OpenGEShimIsAlreadyBuilt=true UET/uet/uet.csproj
    # Ensure the thing we built will actually run...
    ./UET/uet/bin/Release/net7.0/osx.11.0-arm64/publish/uet --help
  artifacts:
    paths:
      - "UET/uet/bin/Release/net7.0/osx.11.0-arm64/publish/uet"

"Build Win UEFS Client":
  stage: Build Pass 1
  tags:
    - redpoint-games-windows
  needs:
    - Timestamp
    - "Build Mac Logging"
  interruptible: true
  script: |
    $PackageVersion = (Get-Content -Raw -Path "package.version").Trim()
    dotnet msbuild -restore -t:Publish -p:RuntimeIdentifier=win-x64 -p:Configuration=Release -p:BaseUetVersion=$PackageVersion -p:PackageVersion=$PackageVersion -p:OpenGEShimIsAlreadyBuilt=true UET/Redpoint.Uefs.Client/Redpoint.Uefs.Client.csproj
    if ($LastExitCode -ne 0) {
      Write-Host "Publish win-x64 (Redpoint.Uefs.Client.csproj) failed with exit code $LastExitCode"
      exit $LastExitCode 
    }
  artifacts:
    paths:
      - "UET/Redpoint.Uefs.Client/bin/Release/net7.0/win-x64/publish/uefs.exe"

"Build Mac UEFS Client":
  stage: Build Pass 1
  tags:
    - redpoint-games-mac
  needs:
    - Timestamp
    - "Build Mac Logging"
  interruptible: true
  script: |
    PACKAGE_VERSION=$(cat package.version | tr -d '\n')
    echo "Package version: $PACKAGE_VERSION"
    dotnet msbuild -restore -t:Publish -p:RuntimeIdentifier=osx.11.0-arm64 -p:Configuration=Release -p:BaseUetVersion=$PACKAGE_VERSION -p:PackageVersion=$PACKAGE_VERSION -p:OpenGEShimIsAlreadyBuilt=true UET/Redpoint.Uefs.Client/Redpoint.Uefs.Client.csproj
    # Ensure the thing we built will actually run...
    ./UET/Redpoint.Uefs.Client/bin/Release/net7.0/osx.11.0-arm64/publish/uefs --help
  artifacts:
    paths:
      - "UET/Redpoint.Uefs.Client/bin/Release/net7.0/osx.11.0-arm64/publish/uefs"

"Build Win UEFS Daemon":
  stage: Build Pass 1
  tags:
    - redpoint-games-windows
  needs:
    - Timestamp
    - "Build Mac Logging"
  interruptible: true
  script: |
    $PackageVersion = (Get-Content -Raw -Path "package.version").Trim()
    dotnet msbuild -restore -t:Publish -p:RuntimeIdentifier=win-x64 -p:Configuration=Release -p:BaseUetVersion=$PackageVersion -p:PackageVersion=$PackageVersion -p:OpenGEShimIsAlreadyBuilt=true UET/Redpoint.Uefs.Daemon/Redpoint.Uefs.Daemon.csproj
    if ($LastExitCode -ne 0) {
      Write-Host "Publish win-x64 (Redpoint.Uefs.Daemon.csproj) failed with exit code $LastExitCode"
      exit $LastExitCode 
    }
  artifacts:
    paths:
      - "UET/Redpoint.Uefs.Daemon/bin/Release/net7.0/win-x64/publish/uefs-daemon.exe"

"Build Mac UEFS Daemon":
  stage: Build Pass 1
  tags:
    - redpoint-games-mac
  needs:
    - Timestamp
    - "Build Mac Logging"
  interruptible: true
  script: |
    PACKAGE_VERSION=$(cat package.version | tr -d '\n')
    echo "Package version: $PACKAGE_VERSION"
    dotnet msbuild -restore -t:Publish -p:RuntimeIdentifier=osx.11.0-arm64 -p:Configuration=Release -p:BaseUetVersion=$PACKAGE_VERSION -p:PackageVersion=$PACKAGE_VERSION -p:OpenGEShimIsAlreadyBuilt=true UET/Redpoint.Uefs.Daemon/Redpoint.Uefs.Daemon.csproj
  artifacts:
    paths:
      - "UET/Redpoint.Uefs.Daemon/bin/Release/net7.0/osx.11.0-arm64/publish/uefs-daemon"

"Build and Test Libraries on Windows":
  stage: Build Libraries
  tags:
    - redpoint-games-windows
  needs:
    - Timestamp
    - "Build OpenGE Shim"
    - "Build Mac Logging"
  interruptible: true
  script: |
    $PackageVersion = (Get-Content -Raw -Path "package.version").Trim()
    dotnet build -c Release /p:PackageVersion=$PackageVersion /p:OpenGEShimIsAlreadyBuilt=true UET/UET.sln
    if ($LastExitCode -ne 0) {
      Write-Host "dotnet build (UET.sln) failed with exit code $LastExitCode"
      exit $LastExitCode 
    }
    dotnet test --no-build --logger:"console" --logger:"junit;LogFilePath=$((Get-Location).Path)\TestResults\{assembly}.test-result.xml" -c Release /p:PackageVersion=$PackageVersion UET/UET.sln
    if ($LastExitCode -ne 0) {
      Write-Host "dotnet test (UET.sln) failed with exit code $LastExitCode"
      exit $LastExitCode 
    }
  artifacts:
    reports:
      junit: TestResults/*.test-result.xml
    paths:
      - "**/*.nupkg"

"Build and Test Libraries on macOS":
  stage: Build Libraries
  tags:
    - redpoint-games-mac
  needs:
    - Timestamp
    - "Build OpenGE Shim"
    - "Build Mac Logging"
  interruptible: true
  script: |
    PACKAGE_VERSION=$(cat package.version | tr -d '\n')
    echo "Package version: $PACKAGE_VERSION"
    dotnet build -c Release /p:PackageVersion=$PACKAGE_VERSION /p:OpenGEShimIsAlreadyBuilt=true UET/UET.sln
    dotnet test --no-build --logger:"console" --logger:"junit;LogFilePath=$(pwd)/TestResults/{assembly}.test-result.xml" -c Release /p:PackageVersion=$PackageVersion UET/UET.sln
  artifacts:
    reports:
      junit: TestResults/*.test-result.xml

"Build Win Pass 2":
  stage: Build Pass 2
  tags:
    - redpoint-games-windows
  needs:
    - Timestamp
    - "Build OpenGE Shim"
    - "Build Mac Logging"
    - "Build Win Pass 1"
    - "Build Mac Pass 1"
    - job: "Build and Test Libraries on Windows"
      artifacts: false
  interruptible: true
  script: |
    $PackageVersion = (Get-Content -Raw -Path "package.version").Trim()
    dotnet msbuild -restore -t:Publish -p:RuntimeIdentifier=win-x64 -p:Configuration=Release -p:EmbeddingCrossPlatform=true -p:BaseUetVersion=$PackageVersion -p:PackageVersion=$PackageVersion -p:OpenGEShimIsAlreadyBuilt=true UET/uet/uet.csproj
    if ($LastExitCode -ne 0) {
      Write-Host "Publish win-x64 (uet.csproj) failed with exit code $LastExitCode"
      exit $LastExitCode 
    }
  artifacts:
    paths:
      - "UET/uet/bin/Release/net7.0/win-x64/publish/uet.exe"

"Build Mac Pass 2":
  stage: Build Pass 2
  tags:
    - redpoint-games-mac
  needs:
    - Timestamp
    - "Build OpenGE Shim"
    - "Build Mac Logging"
    - "Build Win Pass 1"
    - "Build Mac Pass 1"
    - job: "Build and Test Libraries on macOS"
      artifacts: false
  interruptible: true
  script: |
    PACKAGE_VERSION=$(cat package.version | tr -d '\n')
    echo "Package version: $PACKAGE_VERSION"
    dotnet msbuild -restore -t:Publish -p:RuntimeIdentifier=osx.11.0-arm64 -p:Configuration=Release -p:EmbeddingCrossPlatform=true -p:BaseUetVersion=$PACKAGE_VERSION -p:PackageVersion=$PACKAGE_VERSION -p:OpenGEShimIsAlreadyBuilt=true UET/uet/uet.csproj
    # Ensure the thing we built will actually run...
    ./UET/uet/bin/Release/net7.0/osx.11.0-arm64/publish/uet --help
  artifacts:
    paths:
      - "UET/uet/bin/Release/net7.0/osx.11.0-arm64/publish/uet"

"Publish Libraries":
  stage: Publish
  tags:
    - redpoint-games-windows
  needs:
    - Timestamp
    - "Build and Test Libraries on Windows"
    - job: "Build and Test Libraries on macOS"
      artifacts: false
  interruptible: true
  script: |
    $PackageVersion = (Get-Content -Raw -Path "package.version").Trim()
    dotnet nuget push --source https://api.nuget.org/v3/index.json --api-key $env:NUGET_API_KEY (Get-ChildItem -Recurse -Filter "*.$PackageVersion.nupkg" | % { $_.FullName })
    if ($LastExitCode -ne 0) {
      Write-Host "dotnet push failed with exit code $LastExitCode"
      exit $LastExitCode 
    }
  artifacts:
    paths:
      - "**/*.nupkg"
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
    - if: '$CI_PIPELINE_SOURCE == "web"'

"Publish Win":
  stage: Publish
  tags:
    - redpoint-games-windows
  needs:
    - Timestamp
    - "Build Win Pass 2"
    - "Build Win UEFS Client"
    - "Build Win UEFS Daemon"
  interruptible: true
  script: |
    $PackageVersion = (Get-Content -Raw -Path "package.version").Trim()
    $env:B2_ACCOUNT_INFO = Join-Path -Path (Resolve-Path -Path ".") -ChildPath ".b2.db"
    try {
      b2 authorize-account "$env:DL_BACKBLAZE_B2_KEY_ID" "$env:DL_BACKBLAZE_B2_APPLICATION_KEY"
      if ($LASTEXITCODE -ne 0) {
        exit $LASTEXITCODE
      }
      b2 upload-file dl-public-redpoint-games "UET/uet/bin/Release/net7.0/win-x64/publish/uet.exe" "uet/$PackageVersion/windows/uet.exe"
      if ($LASTEXITCODE -ne 0) {
        exit $LASTEXITCODE
      }
      b2 upload-file dl-public-redpoint-games "UET/Redpoint.Uefs.Client/bin/Release/net7.0/win-x64/publish/uefs.exe" "uet/$PackageVersion/windows/uefs.exe"
      if ($LASTEXITCODE -ne 0) {
        exit $LASTEXITCODE
      }
      b2 upload-file dl-public-redpoint-games "UET/Redpoint.Uefs.Daemon/bin/Release/net7.0/win-x64/publish/uefs-daemon.exe" "uet/$PackageVersion/windows/uefs-daemon.exe"
      if ($LASTEXITCODE -ne 0) {
        exit $LASTEXITCODE
      }
    } finally {
      if (Test-Path $env:B2_ACCOUNT_INFO) {
        Write-Output "Cleaning up B2 authentication file..."
        Remove-Item -Force -Path $env:B2_ACCOUNT_INFO
      }
    }
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
    - if: '$CI_PIPELINE_SOURCE == "web"'

"Publish Mac":
  stage: Publish
  tags:
    - redpoint-games-windows
  needs:
    - Timestamp
    - "Build Mac Pass 2"
    - "Build Mac UEFS Client"
    - "Build Mac UEFS Daemon"
  interruptible: true
  script: |
    $PackageVersion = (Get-Content -Raw -Path "package.version").Trim()
    $env:B2_ACCOUNT_INFO = Join-Path -Path (Resolve-Path -Path ".") -ChildPath ".b2.db"
    try {
      b2 authorize-account "$env:DL_BACKBLAZE_B2_KEY_ID" "$env:DL_BACKBLAZE_B2_APPLICATION_KEY"
      if ($LASTEXITCODE -ne 0) {
        exit $LASTEXITCODE
      }
      b2 upload-file dl-public-redpoint-games "UET/uet/bin/Release/net7.0/osx.11.0-arm64/publish/uet" "uet/$PackageVersion/macos/uet"
      if ($LASTEXITCODE -ne 0) {
        exit $LASTEXITCODE
      }
      b2 upload-file dl-public-redpoint-games "UET/Redpoint.Uefs.Client/bin/Release/net7.0/osx.11.0-arm64/publish/uefs" "uet/$PackageVersion/macos/uefs"
      if ($LASTEXITCODE -ne 0) {
        exit $LASTEXITCODE
      }
      b2 upload-file dl-public-redpoint-games "UET/Redpoint.Uefs.Daemon/bin/Release/net7.0/osx.11.0-arm64/publish/uefs-daemon" "uet/$PackageVersion/macos/uefs-daemon"
      if ($LASTEXITCODE -ne 0) {
        exit $LASTEXITCODE
      }
    } finally {
      if (Test-Path $env:B2_ACCOUNT_INFO) {
        Write-Output "Cleaning up B2 authentication file..."
        Remove-Item -Force -Path $env:B2_ACCOUNT_INFO
      }
    }
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
    - if: '$CI_PIPELINE_SOURCE == "web"'

"Publish Timestamp":
  stage: Publish
  tags:
    - redpoint-games-windows
  needs:
    - Timestamp
    - job: "Publish Win"
      artifacts: false
    - job: "Publish Mac"
      artifacts: false
    - job: "Publish Libraries"
      artifacts: false
  interruptible: true
  script: |
    $PackageVersion = (Get-Content -Raw -Path "package.version").Trim()
    $env:B2_ACCOUNT_INFO = Join-Path -Path (Resolve-Path -Path ".") -ChildPath ".b2.db"
    try {
      b2 authorize-account "$env:DL_BACKBLAZE_B2_KEY_ID" "$env:DL_BACKBLAZE_B2_APPLICATION_KEY"
      if ($LASTEXITCODE -ne 0) {
        exit $LASTEXITCODE
      }
      Set-Content -Value $PackageVersion -Path latest.txt
      b2 upload-file dl-public-redpoint-games "latest.txt" "uet/latest"
      if ($LASTEXITCODE -ne 0) {
        exit $LASTEXITCODE
      }
    } finally {
      if (Test-Path $env:B2_ACCOUNT_INFO) {
        Write-Output "Cleaning up B2 authentication file..."
        Remove-Item -Force -Path $env:B2_ACCOUNT_INFO
      }
    }
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
    - if: '$CI_PIPELINE_SOURCE == "web"'

"Publish Container":
  stage: Publish
  needs:
    - Timestamp
    - "Build Win UEFS Client"
    - "Build Win UEFS Daemon"
  tags:
    - redpoint-games-linux
  script: |
    PACKAGE_VERSION=$(cat package.version | tr -d '\n')
    mkdir "$(pwd)/.docker" || true
    export DOCKER_CONFIG="$(pwd)/.docker"
    docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    docker buildx create --name img-builder --use --platform windows/amd64
    docker buildx build --platform windows/amd64 --output=type=registry -f UET/Lib/Uefs/Kubernetes/Dockerfile -t "registry.redpoint.games/redpointgames/uet/uefs:$PACKAGE_VERSION" .
    docker buildx build --platform windows/amd64 --output=type=registry -f UET/Lib/Uefs/Kubernetes/Dockerfile -t "registry.redpoint.games/redpointgames/uet/uefs:latest" .
  after_script:
    - rm -Rf "$(pwd)/.docker" || true
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
    - if: '$CI_PIPELINE_SOURCE == "web"'

"End":
  stage: End
  tags:
    - redpoint-games-windows
  needs:
    - "Build Win Pass 2"
    - "Build Win UEFS Client"
    - "Build Win UEFS Daemon"
    - "Build Mac Pass 2"
    - "Build Mac UEFS Client"
    - "Build Mac UEFS Daemon"
    - job: "Publish Timestamp"
      artifacts: false
    - job: "Publish Container"
      artifacts: false
  interruptible: true
  script: |
    Write-Host "Build complete."
  artifacts:
    paths:
      - UET/uet/bin/Release/net7.0/win-x64/publish/uet.exe
      - UET/Redpoint.Uefs.Client/bin/Release/net7.0/win-x64/publish/uefs.exe
      - UET/Redpoint.Uefs.Daemon/bin/Release/net7.0/win-x64/publish/uefs-daemon.exe
      - UET/uet/bin/Release/net7.0/osx.11.0-arm64/publish/uet
      - UET/Redpoint.Uefs.Client/bin/Release/net7.0/osx.11.0-arm64/publish/uefs
      - UET/Redpoint.Uefs.Daemon/bin/Release/net7.0/osx.11.0-arm64/publish/uefs-daemon
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
    - if: '$CI_PIPELINE_SOURCE == "web"'