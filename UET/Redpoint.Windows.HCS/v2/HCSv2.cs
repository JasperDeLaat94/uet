//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace Redpoint.Windows.HCS.v2
{
    using System = global::System;

    

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Attachment
    {
        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AttachmentType? Type { get; set; }

        [Newtonsoft.Json.JsonProperty("Path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path { get; set; }

        [Newtonsoft.Json.JsonProperty("CachingMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CachingMode? CachingMode { get; set; }

        [Newtonsoft.Json.JsonProperty("ReadOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ReadOnly { get; set; }

        [Newtonsoft.Json.JsonProperty("SupportCompressedVolumes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SupportCompressedVolumes { get; set; }

        [Newtonsoft.Json.JsonProperty("AlwaysAllowSparseFiles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AlwaysAllowSparseFiles { get; set; }

        [Newtonsoft.Json.JsonProperty("SupportEncryptedFiles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SupportEncryptedFiles { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class AttributionRecord
    {
        [Newtonsoft.Json.JsonProperty("WorkerExit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkerExit WorkerExit { get; set; }

        [Newtonsoft.Json.JsonProperty("GuestCrash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GuestCrash GuestCrash { get; set; }

        [Newtonsoft.Json.JsonProperty("TripleFault", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TripleFault TripleFault { get; set; }

        [Newtonsoft.Json.JsonProperty("InjectNonMaskableInterrupt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InjectNonMaskableInterrupt InjectNonMaskableInterrupt { get; set; }

        [Newtonsoft.Json.JsonProperty("OperationFailure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OperationFailure OperationFailure { get; set; }

        [Newtonsoft.Json.JsonProperty("SystemExit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SystemExit SystemExit { get; set; }

        [Newtonsoft.Json.JsonProperty("VirtualDeviceFailure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VirtualDeviceFailure VirtualDeviceFailure { get; set; }

    }

    /// <summary>
    /// Basic information
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class BasicInformation
    {
        /// <summary>
        /// The supported schema versions will be returned as an array. Array element A.X implies all versions with major version A and minor version from 0 to X are also supported.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SupportedSchemaVersions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Version> SupportedSchemaVersions { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Battery
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Chipset
    {
        [Newtonsoft.Json.JsonProperty("Uefi", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Uefi Uefi { get; set; }

        [Newtonsoft.Json.JsonProperty("IsNumLockDisabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsNumLockDisabled { get; set; }

        [Newtonsoft.Json.JsonProperty("BaseBoardSerialNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BaseBoardSerialNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("ChassisSerialNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChassisSerialNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("ChassisAssetTag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChassisAssetTag { get; set; }

        [Newtonsoft.Json.JsonProperty("EnableHibernation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EnableHibernation { get; set; }

        [Newtonsoft.Json.JsonProperty("UseUtc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UseUtc { get; set; }

        [Newtonsoft.Json.JsonProperty("LinuxKernelDirect", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LinuxKernelDirect LinuxKernelDirect { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class CimMount
    {
        [Newtonsoft.Json.JsonProperty("ImagePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ImagePath { get; set; }

        [Newtonsoft.Json.JsonProperty("FileSystemName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileSystemName { get; set; }

        [Newtonsoft.Json.JsonProperty("VolumeGuid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9A-Fa-f]{8}-([0-9A-Fa-f]{4}-){3}[0-9A-Fa-f]{12}$")]
        public string VolumeGuid { get; set; }

        /// <summary>
        /// MountFlags are the flags that are used to alter the behaviour of a mounted cim. These values are defined by the CIMFS API. The value passed for this field will be forwarded to the the CimMountImage call.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MountFlags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MountFlags { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class CloseHandle
    {
        [Newtonsoft.Json.JsonProperty("Handle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StdHandle? Handle { get; set; }

    }

    /// <summary>
    /// Object used by a modify request to add or remove a combined layers structure in the guest. For Windows, the GCS applies a filter in ContainerRootPath using the specified layers as the parent content. Ignores property ScratchPath since the container path is already the scratch path. For linux, the GCS unions the specified layers and ScratchPath together, placing the resulting union filesystem at ContainerRootPath.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class CombinedLayers
    {
        /// <summary>
        /// Layer hierarchy to be combined.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Layers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Layer> Layers { get; set; }

        [Newtonsoft.Json.JsonProperty("ScratchPath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ScratchPath { get; set; }

        [Newtonsoft.Json.JsonProperty("ContainerRootPath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContainerRootPath { get; set; }

    }

    /// <summary>
    /// ComPort specifies the named pipe that will be used for the port, with empty string indicating a disconnected port.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class ComPort
    {
        [Newtonsoft.Json.JsonProperty("NamedPipe", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NamedPipe { get; set; }

        [Newtonsoft.Json.JsonProperty("OptimizeForDebugger", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OptimizeForDebugger { get; set; }

    }

    /// <summary>
    /// Describes the configuration of a compute system to create with all of the necessary resources it requires for a successful boot.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class ComputeSystem
    {
        /// <summary>
        /// A string identifying the owning client for this system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Owner { get; set; }

        [Newtonsoft.Json.JsonProperty("SchemaVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Version SchemaVersion { get; set; }

        /// <summary>
        /// The identifier of the compute system that will host the system described by HostedSystem. The hosting system must already have been created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("HostingSystemId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HostingSystemId { get; set; }

        /// <summary>
        /// The JSON describing the compute system that will be launched inside of the system identified by HostingSystemId. This property is mutually exclusive with the Container and VirtualMachine properties.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("HostedSystem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object HostedSystem { get; set; }

        [Newtonsoft.Json.JsonProperty("Container", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Container Container { get; set; }

        [Newtonsoft.Json.JsonProperty("VirtualMachine", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VirtualMachine VirtualMachine { get; set; }

        /// <summary>
        /// If true, this system will be forcibly terminated when the last HCS_SYSTEM handle corresponding to it is closed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ShouldTerminateOnLastHandleClosed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ShouldTerminateOnLastHandleClosed { get; set; }

    }

    /// <summary>
    /// An object consisting of basic system properties for a compute system
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class ComputeSystemProperties
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("SystemType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SystemType? SystemType { get; set; }

        [Newtonsoft.Json.JsonProperty("State", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public State? State { get; set; }

        [Newtonsoft.Json.JsonProperty("Owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Owner { get; set; }

        [Newtonsoft.Json.JsonProperty("RuntimeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9A-Fa-f]{8}-([0-9A-Fa-f]{4}-){3}[0-9A-Fa-f]{12}$")]
        public string RuntimeId { get; set; }

        [Newtonsoft.Json.JsonProperty("RuntimeOsType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OsType? RuntimeOsType { get; set; }

        [Newtonsoft.Json.JsonProperty("HostingSystemId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HostingSystemId { get; set; }

        [Newtonsoft.Json.JsonProperty("IsDummy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsDummy { get; set; }

        [Newtonsoft.Json.JsonProperty("ObRoot", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ObRoot { get; set; }

        [Newtonsoft.Json.JsonProperty("RuntimeTemplateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RuntimeTemplateId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class ConsoleImage
    {
        [Newtonsoft.Json.JsonProperty("Image", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public byte[] Image { get; set; }

    }

    /// <summary>
    /// A query to request a screenshot of the console of the virtual machine
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class ConsoleImageQuery
    {
        /// <summary>
        /// Requested width of the resulting image
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Width", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Width { get; set; }

        /// <summary>
        /// Requested height of the resulting image
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Height", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Height { get; set; }

        /// <summary>
        /// Flags that determine certain characteristics of the output of the returned image 0x00000001ul: The image data is returned in the OctetString format defined by the DMTF. The first four bytes of the data contains the number of octets (bytes), including the four-byte length, in the big-endian format
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Flags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Flags { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class ConsoleSize
    {
        [Newtonsoft.Json.JsonProperty("Height", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Height { get; set; }

        [Newtonsoft.Json.JsonProperty("Width", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Width { get; set; }

    }

    /// <summary>
    /// Configuration of a Windows Server Container, used during its creation to set up and/or use resources.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Container
    {
        [Newtonsoft.Json.JsonProperty("GuestOs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GuestOs GuestOs { get; set; }

        [Newtonsoft.Json.JsonProperty("Storage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Storage Storage { get; set; }

        /// <summary>
        /// Optional list of directories in the container host that will be mapped to the container guest on creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MappedDirectories", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MappedDirectory> MappedDirectories { get; set; }

        /// <summary>
        /// Optional list of named pipes in the container host that will be mapped to the container guest on creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MappedPipes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MappedPipe> MappedPipes { get; set; }

        [Newtonsoft.Json.JsonProperty("Memory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Container_Memory Memory { get; set; }

        [Newtonsoft.Json.JsonProperty("Processor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Container_Processor Processor { get; set; }

        [Newtonsoft.Json.JsonProperty("Networking", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Networking Networking { get; set; }

        [Newtonsoft.Json.JsonProperty("HvSocket", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Container_HvSocket HvSocket { get; set; }

        [Newtonsoft.Json.JsonProperty("ContainerCredentialGuard", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContainerCredentialGuardState ContainerCredentialGuard { get; set; }

        [Newtonsoft.Json.JsonProperty("RegistryChanges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RegistryChanges RegistryChanges { get; set; }

        /// <summary>
        /// Optional list of direct device assignment configurations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AssignedDevices", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Device> AssignedDevices { get; set; }

        [Newtonsoft.Json.JsonProperty("AdditionalDeviceNamespace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContainersDef_Device AdditionalDeviceNamespace { get; set; }

    }

    /// <summary>
    /// Describes the HvSocket configuration and options for a container.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Container_HvSocket
    {
        [Newtonsoft.Json.JsonProperty("Config", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HvSocketSystemConfig Config { get; set; }

        /// <summary>
        /// When true, enables Powershell Direct service in the guest to allow it to use the HvSocket transport.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EnablePowerShellDirect", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EnablePowerShellDirect { get; set; }

    }

    /// <summary>
    /// Describes memory configuration for a container.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Container_Memory
    {
        /// <summary>
        /// Specifies the memory size in megabytes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SizeInMB", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SizeInMB { get; set; }

    }

    /// <summary>
    /// Specifies CPU limits for a container. Count, Maximum and Weight are all mutually exclusive.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Container_Processor
    {
        /// <summary>
        /// Optional property that represents the fraction of the configured processor count in a container in relation to the processors available in the host. The fraction ultimately determines the portion of processor cycles that the threads in a container can use during each scheduling interval, as the number of cycles per 10,000 cycles.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        /// <summary>
        /// Optional property that limits the share of processor time given to the container relative to other workloads on the processor. The processor weight is a value between 0 and 10000.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Weight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Weight { get; set; }

        /// <summary>
        /// Optional property that determines the portion of processor cycles that the threads in a container can use during each scheduling interval, as the number of cycles per 10,000 cycles. Set processor maximum to a percentage times 100.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Maximum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Maximum { get; set; }

    }

    /// <summary>
    /// Object describing a request to add a Container Credential Guard Instance.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class ContainerCredentialGuardAddInstanceRequest
    {
        /// <summary>
        /// Globally unique identifier to use for the Container Credential Guard Instance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// JSON document as a string that describes the Container Credential Guard Instance's credential specification to use.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CredentialSpec", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CredentialSpec { get; set; }

        [Newtonsoft.Json.JsonProperty("Transport", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ContainerCredentialGuardTransport? Transport { get; set; }

    }

    /// <summary>
    /// Specifies the HvSocket configurations required for a Container Credential Guard instance that is meant to be used with HvSocket transport.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class ContainerCredentialGuardHvSocketServiceConfig
    {
        /// <summary>
        /// Identifier of the service that needs to be configured over HvSocket.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ServiceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9A-Fa-f]{8}-([0-9A-Fa-f]{4}-){3}[0-9A-Fa-f]{12}$")]
        public string ServiceId { get; set; }

        [Newtonsoft.Json.JsonProperty("ServiceConfig", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HvSocketServiceConfig ServiceConfig { get; set; }

    }

    /// <summary>
    /// Describes the configuration of a running Container Credential Guard Instance.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class ContainerCredentialGuardInstance
    {
        /// <summary>
        /// Identifier of a Container Credential Guard Instance, globally unique.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("CredentialGuard", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContainerCredentialGuardState CredentialGuard { get; set; }

        [Newtonsoft.Json.JsonProperty("HvSocketConfig", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContainerCredentialGuardHvSocketServiceConfig HvSocketConfig { get; set; }

    }

    /// <summary>
    /// Object describing a Container Credential Guard system request.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class ContainerCredentialGuardOperationRequest
    {
        [Newtonsoft.Json.JsonProperty("Operation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ContainerCredentialGuardModifyOperation? Operation { get; set; }

        /// <summary>
        /// Object describing the input properties used by the specified operation type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OperationDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object OperationDetails { get; set; }

    }

    /// <summary>
    /// Object describing a request to remove a running Container Credential Guard Instance.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class ContainerCredentialGuardRemoveInstanceRequest
    {
        /// <summary>
        /// Globally unique identifier of a running Container Credential Guard Instance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class ContainerCredentialGuardState
    {
        /// <summary>
        /// Authentication cookie for calls to a Container Credential Guard instance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Cookie", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public byte[] Cookie { get; set; }

        /// <summary>
        /// Name of the RPC endpoint of the Container Credential Guard instance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RpcEndpoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RpcEndpoint { get; set; }

        [Newtonsoft.Json.JsonProperty("Transport", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ContainerCredentialGuardTransport? Transport { get; set; }

        /// <summary>
        /// Credential spec used for the configured Container Credential Guard instance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CredentialSpec", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CredentialSpec { get; set; }

    }

    /// <summary>
    /// Object listing the system's running Container Credential Guard Instances.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class ContainerCredentialGuardSystemInfo
    {
        /// <summary>
        /// Array of running Container Credential Guard Instances.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Instances", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ContainerCredentialGuardInstance> Instances { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class ContainersDef_BatchedBinding
    {
        [Newtonsoft.Json.JsonProperty("filepath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Filepath { get; set; }

        [Newtonsoft.Json.JsonProperty("bindingroots", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Bindingroots { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class ContainersDef_Container
    {
        [Newtonsoft.Json.JsonProperty("namespace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Namespace Namespace { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class ContainersDef_Device
    {
        [Newtonsoft.Json.JsonProperty("device_extension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DeviceExtension> Device_extension { get; set; }

    }

    /// <summary>
    /// CPU groups allow Hyper-V administrators to better manage and allocate the host's CPU resources across guest virtual machines
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class CpuGroup
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9A-Fa-f]{8}-([0-9A-Fa-f]{4}-){3}[0-9A-Fa-f]{12}$")]
        public string Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class CpuGroupAffinity
    {
        [Newtonsoft.Json.JsonProperty("LogicalProcessorCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LogicalProcessorCount { get; set; }

        [Newtonsoft.Json.JsonProperty("LogicalProcessors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> LogicalProcessors { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class CpuGroupConfig
    {
        [Newtonsoft.Json.JsonProperty("GroupId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9A-Fa-f]{8}-([0-9A-Fa-f]{4}-){3}[0-9A-Fa-f]{12}$")]
        public string GroupId { get; set; }

        [Newtonsoft.Json.JsonProperty("Affinity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CpuGroupAffinity Affinity { get; set; }

        [Newtonsoft.Json.JsonProperty("GroupProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CpuGroupProperty> GroupProperties { get; set; }

        /// <summary>
        /// Hypervisor CPU group IDs exposed to clients
        /// </summary>
        [Newtonsoft.Json.JsonProperty("HypervisorGroupId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HypervisorGroupId { get; set; }

    }

    /// <summary>
    /// Structure used to return cpu groups for a Service property query
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class CpuGroupConfigurations
    {
        [Newtonsoft.Json.JsonProperty("CpuGroups", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CpuGroupConfig> CpuGroups { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class CpuGroupProperty
    {
        [Newtonsoft.Json.JsonProperty("PropertyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PropertyCode { get; set; }

        [Newtonsoft.Json.JsonProperty("PropertyValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PropertyValue { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class CrashOptions
    {
        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CrashType? Type { get; set; }

    }

    /// <summary>
    /// Crash information reported through HcsEventSystemCrashInitiated and HcsEventSystemCrashReport notifications. This object is also used as the input to HcsSubmitWerReport.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class CrashReport
    {
        /// <summary>
        /// Compute system id the CrashReport is for.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SystemId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SystemId { get; set; }

        /// <summary>
        /// Trace correlation activity Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ActivityId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9A-Fa-f]{8}-([0-9A-Fa-f]{4}-){3}[0-9A-Fa-f]{12}$")]
        public string ActivityId { get; set; }

        [Newtonsoft.Json.JsonProperty("WindowsCrashInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WindowsCrashReport WindowsCrashInfo { get; set; }

        /// <summary>
        /// Crash parameters as reported by the guest OS. For Windows these correspond to the bug check code followed by 4 bug check code specific values. The CrashParameters are available in both HcsEventSystemCrashInitiated and HcsEventSystemCrashReport events.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CrashParameters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> CrashParameters { get; set; }

        /// <summary>
        /// An optional string provided by the guest OS. Currently only used by Linux guest OSes with Hyper-V Linux Integration Services configured.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CrashLog", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CrashLog { get; set; }

        /// <summary>
        /// Provides overall status on crash reporting, S_OK indicates success, other HRESULT values on error.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Status { get; set; }

        /// <summary>
        /// Opaque guest OS reported ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PreOSId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PreOSId { get; set; }

        /// <summary>
        /// If true, the guest OS reported that a crash dump stack/handler was unavailable or could not be invoked.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CrashStackUnavailable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CrashStackUnavailable { get; set; }

    }

    /// <summary>
    /// Create group operation settings
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class CreateGroupOperation
    {
        [Newtonsoft.Json.JsonProperty("GroupId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9A-Fa-f]{8}-([0-9A-Fa-f]{4}-){3}[0-9A-Fa-f]{12}$")]
        public string GroupId { get; set; }

        [Newtonsoft.Json.JsonProperty("LogicalProcessorCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LogicalProcessorCount { get; set; }

        [Newtonsoft.Json.JsonProperty("LogicalProcessors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> LogicalProcessors { get; set; }

    }

    /// <summary>
    /// Delete group operation settings
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class DeleteGroupOperation
    {
        [Newtonsoft.Json.JsonProperty("GroupId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9A-Fa-f]{8}-([0-9A-Fa-f]{4}-){3}[0-9A-Fa-f]{12}$")]
        public string GroupId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Device
    {
        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DeviceType? Type { get; set; }

        /// <summary>
        /// The interface class guid of the device interfaces to assign to the container. Only used when Type is ClassGuid.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("InterfaceClassGuid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9A-Fa-f]{8}-([0-9A-Fa-f]{4}-){3}[0-9A-Fa-f]{12}$")]
        public string InterfaceClassGuid { get; set; }

        /// <summary>
        /// The location path of the device to assign to the container. Only used when Type is DeviceInstance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("LocationPath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LocationPath { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class DeviceCategory
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("interface_class", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<InterfaceClass> Interface_class { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class DeviceExtension
    {
        [Newtonsoft.Json.JsonProperty("device_category", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DeviceCategory Device_category { get; set; }

        [Newtonsoft.Json.JsonProperty("namespace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Namespace Namespace { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class DeviceInstance
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("location_path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Location_path { get; set; }

        [Newtonsoft.Json.JsonProperty("port_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Port_name { get; set; }

        [Newtonsoft.Json.JsonProperty("interface_class", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<InterfaceClass> Interface_class { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class DeviceNamespace
    {
        [Newtonsoft.Json.JsonProperty("requires_driverstore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Requires_driverstore { get; set; }

        [Newtonsoft.Json.JsonProperty("device_category", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DeviceCategory> Device_category { get; set; }

        [Newtonsoft.Json.JsonProperty("device_instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DeviceInstance> Device_instance { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Devices
    {
        /// <summary>
        /// An optional object that maps COM Port objects for any ports configured on the virtual machine. The key in the map is the integer, starting from zero, that will identify the COM port into the guest.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ComPorts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, ComPort> ComPorts { get; set; }

        [Newtonsoft.Json.JsonProperty("VirtioSerial", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VirtioSerial VirtioSerial { get; set; }

        /// <summary>
        /// An optional object that maps SCSI controllers, identified by friendly name. The provided name is hashed to create the controller's channel instance identifier. If the name is already a GUID, that GUID will be used as the channel instance identifier as-is.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Scsi", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, Scsi> Scsi { get; set; }

        [Newtonsoft.Json.JsonProperty("VirtualPMem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VirtualPMemController VirtualPMem { get; set; }

        /// <summary>
        /// An optional object that maps network adapters, identified by friendly name. The provided name is hashed to create the adapter's instance identifier. If the name is already a GUID, that GUID will be used as the identifier as-is.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("NetworkAdapters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, NetworkAdapter> NetworkAdapters { get; set; }

        [Newtonsoft.Json.JsonProperty("VideoMonitor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VideoMonitor VideoMonitor { get; set; }

        [Newtonsoft.Json.JsonProperty("Keyboard", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Keyboard Keyboard { get; set; }

        [Newtonsoft.Json.JsonProperty("Mouse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Mouse Mouse { get; set; }

        [Newtonsoft.Json.JsonProperty("HvSocket", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VirtualMachine_HvSocket HvSocket { get; set; }

        [Newtonsoft.Json.JsonProperty("EnhancedModeVideo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EnhancedModeVideo EnhancedModeVideo { get; set; }

        [Newtonsoft.Json.JsonProperty("GuestCrashReporting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GuestCrashReporting GuestCrashReporting { get; set; }

        [Newtonsoft.Json.JsonProperty("VirtualSmb", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VirtualSmb VirtualSmb { get; set; }

        [Newtonsoft.Json.JsonProperty("Plan9", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Plan9 Plan9 { get; set; }

        [Newtonsoft.Json.JsonProperty("Battery", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Battery Battery { get; set; }

        /// <summary>
        /// An optional object that maps flexible IoV devices, identified by friendly name. The provided name is hashed to create the device's instance identifier. If the name is already a GUID, that GUID will be used as the identifier as-is.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FlexibleIov", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, FlexibleIoDevice> FlexibleIov { get; set; }

        [Newtonsoft.Json.JsonProperty("SharedMemory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SharedMemoryConfiguration SharedMemory { get; set; }

        [Newtonsoft.Json.JsonProperty("VirtualPci", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, VirtualPciDevice> VirtualPci { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class EnhancedModeVideo
    {
        [Newtonsoft.Json.JsonProperty("ConnectionOptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RdpConnectionOptions ConnectionOptions { get; set; }

    }

    /// <summary>
    /// Error descriptor that provides the info of an error object
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class ErrorEvent
    {
        /// <summary>
        /// Fully formated error message
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        /// <summary>
        /// Stack trace in string form
        /// </summary>
        [Newtonsoft.Json.JsonProperty("StackTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StackTrace { get; set; }

        /// <summary>
        /// Event definition
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Provider", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9A-Fa-f]{8}-([0-9A-Fa-f]{4}-){3}[0-9A-Fa-f]{12}$")]
        public string Provider { get; set; }

        /// <summary>
        /// Event Id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EventId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? EventId { get; set; }

        /// <summary>
        /// Flags
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Flags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Flags { get; set; }

        /// <summary>
        /// Source
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Source", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Source { get; set; }

        /// <summary>
        /// Event data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EventData> Data { get; set; }

    }

    /// <summary>
    /// Event data element
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class EventData
    {
        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EventDataType? Type { get; set; }

        /// <summary>
        /// Event value
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class ExportLayerOptions
    {
        [Newtonsoft.Json.JsonProperty("IsWritableLayer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsWritableLayer { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class FilesystemLayer
    {
        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9A-Fa-f]{8}-([0-9A-Fa-f]{4}-){3}[0-9A-Fa-f]{12}$")]
        public string Identifier { get; set; }

        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class FilesystemNamespace
    {
        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path { get; set; }

        [Newtonsoft.Json.JsonProperty("isolation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FilesystemIsolationMode? Isolation { get; set; }

        [Newtonsoft.Json.JsonProperty("nesting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FilesystemNestingMode? Nesting { get; set; }

        [Newtonsoft.Json.JsonProperty("layer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FilesystemLayer> Layer { get; set; }

        [Newtonsoft.Json.JsonProperty("bindings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ContainersDef_BatchedBinding> Bindings { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class FlexibleIoDevice
    {
        [Newtonsoft.Json.JsonProperty("EmulatorId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9A-Fa-f]{8}-([0-9A-Fa-f]{4}-){3}[0-9A-Fa-f]{12}$")]
        public string EmulatorId { get; set; }

        [Newtonsoft.Json.JsonProperty("HostingModel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FlexibleIoDeviceHostingModel? HostingModel { get; set; }

        [Newtonsoft.Json.JsonProperty("Configuration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Configuration { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class GpuConfiguration
    {
        [Newtonsoft.Json.JsonProperty("AssignmentMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GpuAssignmentMode? AssignmentMode { get; set; }

        /// <summary>
        /// This only applies to List mode, and is ignored in other modes. In GPU-P, string is GPU device interface, and unit16 is partition id. HCS simply assigns the partition with the input id. In GPU-PV, string is GPU device interface, and unit16 is 0xffff. HCS needs to find an available partition to assign.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AssignmentRequest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, int> AssignmentRequest { get; set; }

        /// <summary>
        /// Whether we allow vendor extension.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AllowVendorExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AllowVendorExtension { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class GuestConnection
    {
        /// <summary>
        /// When true, use Vsock rather than Hyper-V sockets to communicate with the guest service.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("UseVsock", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UseVsock { get; set; }

        /// <summary>
        /// When true, don't disconnect the guest connection when pausing the virtual machine.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("UseConnectedSuspend", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UseConnectedSuspend { get; set; }

        /// <summary>
        /// when true, set the guest's time zone to that of the host.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("UseHostTimeZone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UseHostTimeZone { get; set; }

    }

    /// <summary>
    /// Information about the guest.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class GuestConnectionInfo
    {
        /// <summary>
        /// Each schema version x.y stands for the range of versions a.b where a==x and b&lt;=y. This list comes from the SupportedSchemaVersions field in GcsCapabilities.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SupportedSchemaVersions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Version> SupportedSchemaVersions { get; set; }

        [Newtonsoft.Json.JsonProperty("ProtocolVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ProtocolVersion { get; set; }

        [Newtonsoft.Json.JsonProperty("GuestDefinedCapabilities", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object GuestDefinedCapabilities { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class GuestCrash
    {
        /// <summary>
        /// Crash parameters as reported by the guest.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CrashParameters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> CrashParameters { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class GuestCrashReporting
    {
        [Newtonsoft.Json.JsonProperty("WindowsCrashSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WindowsCrashReporting WindowsCrashSettings { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class GuestModifySettingRequest
    {
        [Newtonsoft.Json.JsonProperty("ResourceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ModifyResourceType? ResourceType { get; set; }

        [Newtonsoft.Json.JsonProperty("RequestType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ModifyRequestType? RequestType { get; set; }

        [Newtonsoft.Json.JsonProperty("Settings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Settings { get; set; }

    }

    /// <summary>
    /// Properties of the guest operating system that boots on a Windows Server Container.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class GuestOs
    {
        /// <summary>
        /// HostName assigned to a container guest operating system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("HostName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HostName { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class GuestState
    {
        /// <summary>
        /// The path to an existing file uses for persistent guest state storage. An empty string indicates the system should initialize new transient, in-memory guest state.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("GuestStateFilePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GuestStateFilePath { get; set; }

        /// <summary>
        /// The path to an existing file for persistent runtime state storage. An empty string indicates the system should initialize new transient, in-memory runtime state.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RuntimeStateFilePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RuntimeStateFilePath { get; set; }

        /// <summary>
        /// If true, the guest state and runtime state files will be used as templates to populate transient, in-memory state instead of using the files as persistent backing store.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ForceTransientState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ForceTransientState { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Heartbeat
    {

    }

    /// <summary>
    /// Describes the configuration of a container compute system hosted by another compute system. This can have its own schema version since the hosted system could support different versions compared to the host machine.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class HostedSystem
    {
        [Newtonsoft.Json.JsonProperty("SchemaVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Version SchemaVersion { get; set; }

        [Newtonsoft.Json.JsonProperty("Container", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Container Container { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class HostFiles
    {
        [Newtonsoft.Json.JsonProperty("base_image_path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Base_image_path { get; set; }

        [Newtonsoft.Json.JsonProperty("sandbox_path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sandbox_path { get; set; }

        [Newtonsoft.Json.JsonProperty("file", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> File { get; set; }

    }

    /// <summary>
    /// Structure used to request a service processor modification
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class HostProcessorModificationRequest
    {
        [Newtonsoft.Json.JsonProperty("Operation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ModifyServiceOperation? Operation { get; set; }

        [Newtonsoft.Json.JsonProperty("OperationDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object OperationDetails { get; set; }

    }

    /// <summary>
    /// This class defines address settings applied to a VM by the GCS every time a VM starts or restores.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class HvSocketAddress
    {
        [Newtonsoft.Json.JsonProperty("LocalAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9A-Fa-f]{8}-([0-9A-Fa-f]{4}-){3}[0-9A-Fa-f]{12}$")]
        public string LocalAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("ParentAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9A-Fa-f]{8}-([0-9A-Fa-f]{4}-){3}[0-9A-Fa-f]{12}$")]
        public string ParentAddress { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class HvSocketServiceConfig
    {
        /// <summary>
        /// SDDL string that HvSocket will check before allowing a host process to bind to this specific service. If not specified, defaults to the system DefaultBindSecurityDescriptor, defined in HvSocketSystemWpConfig in V1.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("BindSecurityDescriptor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BindSecurityDescriptor { get; set; }

        /// <summary>
        /// SDDL string that HvSocket will check before allowing a host process to connect to this specific service. If not specified, defaults to the system DefaultConnectSecurityDescriptor, defined in HvSocketSystemWpConfig in V1.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ConnectSecurityDescriptor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConnectSecurityDescriptor { get; set; }

        /// <summary>
        /// If true, HvSocket will process wildcard binds for this service/system combination. Wildcard binds are secured in the registry at SOFTWARE/Microsoft/Windows NT/CurrentVersion/Virtualization/HvSocket/WildcardDescriptors
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AllowWildcardBinds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AllowWildcardBinds { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class HvSocketSystemConfig
    {
        /// <summary>
        /// SDDL string that HvSocket will check before allowing a host process to bind to an unlisted service for this specific container/VM (not wildcard binds).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DefaultBindSecurityDescriptor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultBindSecurityDescriptor { get; set; }

        /// <summary>
        /// SDDL string that HvSocket will check before allowing a host process to connect to an unlisted service in the VM/container.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DefaultConnectSecurityDescriptor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultConnectSecurityDescriptor { get; set; }

        [Newtonsoft.Json.JsonProperty("ServiceTable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, HvSocketServiceConfig> ServiceTable { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class IdleProcessorsRequest
    {
        [Newtonsoft.Json.JsonProperty("IdleProcessorCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdleProcessorCount { get; set; }

    }

    /// <summary>
    /// A non-maskable interrupt (NMI) was inject by the host management client or other tool.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class InjectNonMaskableInterrupt
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class IntegrationComponentStatus
    {
        /// <summary>
        /// If IC is enabled on this compute system
        /// </summary>
        [Newtonsoft.Json.JsonProperty("IsEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("State", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IntegrationComponentOperationalState? State { get; set; }

        [Newtonsoft.Json.JsonProperty("Reason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IntegrationComponentOperatingStateReason? Reason { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class InterfaceClass
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InterfaceClassType? Type { get; set; }

        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9A-Fa-f]{8}-([0-9A-Fa-f]{4}-){3}[0-9A-Fa-f]{12}$")]
        public string Identifier { get; set; }

        [Newtonsoft.Json.JsonProperty("recurse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Recurse { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class IovSettings
    {
        /// <summary>
        /// The weight assigned to this port for I/O virtualization (IOV) offloading. Setting this to 0 disables IOV offloading.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OffloadWeight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OffloadWeight { get; set; }

        /// <summary>
        /// The number of queue pairs requested for this port for I/O virtualization (IOV) offloading.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("QueuePairsRequested", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? QueuePairsRequested { get; set; }

        [Newtonsoft.Json.JsonProperty("InterruptModeration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InterruptModerationMode? InterruptModeration { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class JobCpu
    {
        [Newtonsoft.Json.JsonProperty("rate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Rate { get; set; }

        [Newtonsoft.Json.JsonProperty("weight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Weight { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class JobMemory
    {
        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Limit { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class JobNamespace
    {
        [Newtonsoft.Json.JsonProperty("cpu", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JobCpu Cpu { get; set; }

        [Newtonsoft.Json.JsonProperty("memory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JobMemory Memory { get; set; }

        [Newtonsoft.Json.JsonProperty("systemroot", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JobSystemRoot Systemroot { get; set; }

        [Newtonsoft.Json.JsonProperty("terminationpolicy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public JobTerminationPolicy? Terminationpolicy { get; set; }

        [Newtonsoft.Json.JsonProperty("threadimpersonation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Threadimpersonation { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class JobSystemRoot
    {
        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Keyboard
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class KvpExchange
    {
        [Newtonsoft.Json.JsonProperty("EnableHostOSInfoKvpItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StateOverride? EnableHostOSInfoKvpItems { get; set; }

        [Newtonsoft.Json.JsonProperty("EntriesToBeAdded", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> EntriesToBeAdded { get; set; }

        [Newtonsoft.Json.JsonProperty("EntriesToBeRemoved", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> EntriesToBeRemoved { get; set; }

    }

    /// <summary>
    /// Query information to request from the key-value exchange integration component
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class KvpQuery
    {
        [Newtonsoft.Json.JsonProperty("Source", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public KvpSource? Source { get; set; }

        /// <summary>
        /// Keys in the key-value pair to be used for the query depending on the operation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Keys", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Keys { get; set; }

    }

    /// <summary>
    /// Describe the parent hierarchy for a container's storage
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Layer
    {
        /// <summary>
        /// Identifier for a layer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9A-Fa-f]{8}-([0-9A-Fa-f]{4}-){3}[0-9A-Fa-f]{12}$")]
        public string Id { get; set; }

        /// <summary>
        /// Root path of the layer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path { get; set; }

        [Newtonsoft.Json.JsonProperty("PathType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PathType? PathType { get; set; }

        [Newtonsoft.Json.JsonProperty("Cache", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CacheMode? Cache { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class LayerData
    {
        [Newtonsoft.Json.JsonProperty("SchemaVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Version SchemaVersion { get; set; }

        [Newtonsoft.Json.JsonProperty("Layers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Layer> Layers { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class LinuxKernelDirect
    {
        [Newtonsoft.Json.JsonProperty("KernelFilePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string KernelFilePath { get; set; }

        [Newtonsoft.Json.JsonProperty("InitRdPath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InitRdPath { get; set; }

        [Newtonsoft.Json.JsonProperty("KernelCmdLine", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string KernelCmdLine { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class LogicalProcessor
    {
        [Newtonsoft.Json.JsonProperty("LpIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LpIndex { get; set; }

        [Newtonsoft.Json.JsonProperty("NodeNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NodeNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("PackageId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PackageId { get; set; }

        [Newtonsoft.Json.JsonProperty("CoreId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CoreId { get; set; }

        [Newtonsoft.Json.JsonProperty("RootVpIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RootVpIndex { get; set; }

        [Newtonsoft.Json.JsonProperty("Subnodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Subnode> Subnodes { get; set; }

    }

    /// <summary>
    /// Object that describes a directory in the host that is requested to be mapped into a compute system's guest.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class MappedDirectory
    {
        /// <summary>
        /// Path in the host that is going to be mapped into the compute system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("HostPath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HostPath { get; set; }

        [Newtonsoft.Json.JsonProperty("HostPathType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PathType? HostPathType { get; set; }

        /// <summary>
        /// Path relative to the compute system's guest. This is the resulting path from mapping the host path.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ContainerPath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContainerPath { get; set; }

        /// <summary>
        /// When set to true, the mapped directory in the compute system's guest will be read-only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ReadOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ReadOnly { get; set; }

        /// <summary>
        /// When set to true, the mapped directory in the compute system's guest will support cloud files.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SupportCloudFiles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SupportCloudFiles { get; set; }

    }

    /// <summary>
    /// Object that describes a named pipe that is requested to be mapped into a compute system's guest.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class MappedPipe
    {
        /// <summary>
        /// The resulting named pipe that will be accessible in the compute system's guest.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ContainerPipeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContainerPipeName { get; set; }

        /// <summary>
        /// The named pipe path in the host that will be mapped into a compute system's guest.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("HostPath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HostPath { get; set; }

        [Newtonsoft.Json.JsonProperty("HostPathType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MappedPipePathType? HostPathType { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class MappedVirtualDisk
    {
        [Newtonsoft.Json.JsonProperty("ContainerPath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContainerPath { get; set; }

        [Newtonsoft.Json.JsonProperty("Lun", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Lun { get; set; }

    }

    /// <summary>
    /// The response of memory information for virtual machine when query memory propery of compute system
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class MemoryInformationForVm
    {
        [Newtonsoft.Json.JsonProperty("VirtualNodeCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? VirtualNodeCount { get; set; }

        [Newtonsoft.Json.JsonProperty("VirtualMachineMemory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VmMemory VirtualMachineMemory { get; set; }

        [Newtonsoft.Json.JsonProperty("VirtualNodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<VirtualNodeInfo> VirtualNodes { get; set; }

    }

    /// <summary>
    /// Memory runtime statistics
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class MemoryStats
    {
        [Newtonsoft.Json.JsonProperty("MemoryUsageCommitBytes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MemoryUsageCommitBytes { get; set; }

        [Newtonsoft.Json.JsonProperty("MemoryUsageCommitPeakBytes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MemoryUsageCommitPeakBytes { get; set; }

        [Newtonsoft.Json.JsonProperty("MemoryUsagePrivateWorkingSetBytes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MemoryUsagePrivateWorkingSetBytes { get; set; }

    }

    /// <summary>
    /// Structure used for service level modification request. Right now, we support modification of a single property type in a call.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class ModificationRequest
    {
        [Newtonsoft.Json.JsonProperty("PropertyType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ModifyPropertyType? PropertyType { get; set; }

        /// <summary>
        /// Settings to the modification request
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Settings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Settings { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class ModifySettingRequest
    {
        [Newtonsoft.Json.JsonProperty("ResourcePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResourcePath { get; set; }

        [Newtonsoft.Json.JsonProperty("RequestType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ModifyRequestType? RequestType { get; set; }

        [Newtonsoft.Json.JsonProperty("Settings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Settings { get; set; }

        [Newtonsoft.Json.JsonProperty("GuestRequest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object GuestRequest { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class MountManagerMountPoint
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class MountManagerNamespace
    {
        [Newtonsoft.Json.JsonProperty("mount_point", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MountManagerMountPoint> Mount_point { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Mouse
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class NamedPipeNamespace
    {
        [Newtonsoft.Json.JsonProperty("symlink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<NamedPipeSymlink> Symlink { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class NamedPipeSymlink
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Namespace
    {
        [Newtonsoft.Json.JsonProperty("job", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JobNamespace Job { get; set; }

        [Newtonsoft.Json.JsonProperty("filesystem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilesystemNamespace Filesystem { get; set; }

        [Newtonsoft.Json.JsonProperty("mountmgr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MountManagerNamespace Mountmgr { get; set; }

        [Newtonsoft.Json.JsonProperty("namedpipe", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NamedPipeNamespace Namedpipe { get; set; }

        [Newtonsoft.Json.JsonProperty("ob", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ObjectNamespace Ob { get; set; }

        [Newtonsoft.Json.JsonProperty("registry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RegistryNamespace Registry { get; set; }

        [Newtonsoft.Json.JsonProperty("network", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NetworkNamespace Network { get; set; }

        [Newtonsoft.Json.JsonProperty("device", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DeviceNamespace Device { get; set; }

        [Newtonsoft.Json.JsonProperty("hostfiles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HostFiles Hostfiles { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class NetworkAdapter
    {
        [Newtonsoft.Json.JsonProperty("EndpointId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9A-Fa-f]{8}-([0-9A-Fa-f]{4}-){3}[0-9A-Fa-f]{12}$")]
        public string EndpointId { get; set; }

        [Newtonsoft.Json.JsonProperty("MacAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MacAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("InstanceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9A-Fa-f]{8}-([0-9A-Fa-f]{4}-){3}[0-9A-Fa-f]{12}$")]
        public string InstanceId { get; set; }

        /// <summary>
        /// Disable interrupt batching (MNF) for network to decrease latency and increase throughput, at per-interrupt processing cost.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DisableInterruptBatching", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DisableInterruptBatching { get; set; }

        [Newtonsoft.Json.JsonProperty("IovSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IovSettings IovSettings { get; set; }

        [Newtonsoft.Json.JsonProperty("ConnectionState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StateOverride? ConnectionState { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Networking
    {
        [Newtonsoft.Json.JsonProperty("AllowUnqualifiedDnsQuery", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AllowUnqualifiedDnsQuery { get; set; }

        [Newtonsoft.Json.JsonProperty("DnsSearchList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DnsSearchList { get; set; }

        [Newtonsoft.Json.JsonProperty("NetworkSharedContainerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NetworkSharedContainerName { get; set; }

        /// <summary>
        /// Guid in windows; string in linux
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Namespace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Namespace { get; set; }

        [Newtonsoft.Json.JsonProperty("NetworkAdapters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> NetworkAdapters { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class NetworkNamespace
    {
        [Newtonsoft.Json.JsonProperty("compartment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Compartment { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class ObjectDirectory
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("clonesd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Clonesd { get; set; }

        [Newtonsoft.Json.JsonProperty("shadow", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ObjectDirectoryShadow? Shadow { get; set; }

        [Newtonsoft.Json.JsonProperty("symlink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ObjectSymlink> Symlink { get; set; }

        [Newtonsoft.Json.JsonProperty("objdir", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ObjectDirectory> Objdir { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class ObjectNamespace
    {
        [Newtonsoft.Json.JsonProperty("shadow", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ObjectDirectoryShadow? Shadow { get; set; }

        [Newtonsoft.Json.JsonProperty("symlink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ObjectSymlink> Symlink { get; set; }

        [Newtonsoft.Json.JsonProperty("objdir", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ObjectDirectory> Objdir { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class ObjectSymlink
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path { get; set; }

        [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ObjectSymlinkScope? Scope { get; set; }

        [Newtonsoft.Json.JsonProperty("pathtoclone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pathtoclone { get; set; }

        [Newtonsoft.Json.JsonProperty("access_mask", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Access_mask { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class OperationFailure
    {
        [Newtonsoft.Json.JsonProperty("Detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OperationFailureDetail? Detail { get; set; }

    }

    /// <summary>
    /// / Contains information describing a failure in an operation on a compute system.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class OperationFailureInfo
    {
        [Newtonsoft.Json.JsonProperty("Result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Result { get; set; }

    }

    /// <summary>
    /// / Information about an operation on a compute system. / An operation is typically an HCS API call but can also be something like / a compute system exit or crash.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class OperationInfo
    {
        [Newtonsoft.Json.JsonProperty("Operation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OperationType? Operation { get; set; }

        /// <summary>
        /// / Start time of the opertation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("StartTimestamp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? StartTimestamp { get; set; }

        /// <summary>
        /// / End time of the opertation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EndTimestamp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EndTimestamp { get; set; }

        [Newtonsoft.Json.JsonProperty("FailureInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OperationFailureInfo FailureInfo { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class OsLayerOptions
    {
        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OsLayerType? Type { get; set; }

        [Newtonsoft.Json.JsonProperty("DisableCiCacheOptimization", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DisableCiCacheOptimization { get; set; }

        [Newtonsoft.Json.JsonProperty("SkipUpdateBcdForBoot", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SkipUpdateBcdForBoot { get; set; }

    }

    /// <summary>
    /// Notification data that is indicated to components running in the Virtual Machine.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class PauseNotification
    {
        [Newtonsoft.Json.JsonProperty("Reason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PauseReason? Reason { get; set; }

    }

    /// <summary>
    /// Options for HcsPauseComputeSystem
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class PauseOptions
    {
        [Newtonsoft.Json.JsonProperty("SuspensionLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PauseSuspensionLevel? SuspensionLevel { get; set; }

        [Newtonsoft.Json.JsonProperty("HostedNotification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PauseNotification HostedNotification { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Plan9
    {
        [Newtonsoft.Json.JsonProperty("Shares", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Plan9Share> Shares { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Plan9Share
    {
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The name by which the guest operation system can access this share, via the aname parameter in the Plan9 protocol.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AccessName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccessName { get; set; }

        [Newtonsoft.Json.JsonProperty("Path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path { get; set; }

        [Newtonsoft.Json.JsonProperty("Port", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Port { get; set; }

        [Newtonsoft.Json.JsonProperty("AllowedFiles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> AllowedFiles { get; set; }

    }

    /// <summary>
    /// Information about a process running in a container
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class ProcessDetails
    {
        [Newtonsoft.Json.JsonProperty("ProcessId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ProcessId { get; set; }

        [Newtonsoft.Json.JsonProperty("ImageName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ImageName { get; set; }

        [Newtonsoft.Json.JsonProperty("CreateTimestamp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreateTimestamp { get; set; }

        [Newtonsoft.Json.JsonProperty("UserTime100ns", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? UserTime100ns { get; set; }

        [Newtonsoft.Json.JsonProperty("KernelTime100ns", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? KernelTime100ns { get; set; }

        [Newtonsoft.Json.JsonProperty("MemoryCommitBytes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MemoryCommitBytes { get; set; }

        [Newtonsoft.Json.JsonProperty("MemoryWorkingSetPrivateBytes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MemoryWorkingSetPrivateBytes { get; set; }

        [Newtonsoft.Json.JsonProperty("MemoryWorkingSetSharedBytes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MemoryWorkingSetSharedBytes { get; set; }

    }

    /// <summary>
    /// Passed to HcsRpc_ModifyProcess
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class ProcessModifyRequest
    {
        [Newtonsoft.Json.JsonProperty("Operation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ModifyOperation? Operation { get; set; }

        [Newtonsoft.Json.JsonProperty("ConsoleSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ConsoleSize ConsoleSize { get; set; }

        [Newtonsoft.Json.JsonProperty("CloseHandle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CloseHandle CloseHandle { get; set; }

    }

    /// <summary>
    /// Used when modifying processor scheduling limits of a virtual machine.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class ProcessorLimits
    {
        /// <summary>
        /// Maximum amount of host CPU resources that the virtual machine can use.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Limit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Limit { get; set; }

        /// <summary>
        /// Value describing the relative priority of this virtual machine compared to other virtual machines.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Weight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Weight { get; set; }

        /// <summary>
        /// Minimum amount of host CPU resources that the virtual machine is guaranteed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Reservation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Reservation { get; set; }

        /// <summary>
        /// Provides the target maximum CPU frequency, in MHz, for a virtual machine.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MaximumFrequencyMHz", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaximumFrequencyMHz { get; set; }

    }

    /// <summary>
    /// CPU runtime statistics
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class ProcessorStats
    {
        [Newtonsoft.Json.JsonProperty("TotalRuntime100ns", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalRuntime100ns { get; set; }

        [Newtonsoft.Json.JsonProperty("RuntimeUser100ns", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RuntimeUser100ns { get; set; }

        [Newtonsoft.Json.JsonProperty("RuntimeKernel100ns", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RuntimeKernel100ns { get; set; }

    }

    /// <summary>
    /// Structure used to return processor topology for a Service property query
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class ProcessorTopology
    {
        [Newtonsoft.Json.JsonProperty("LogicalProcessorCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LogicalProcessorCount { get; set; }

        [Newtonsoft.Json.JsonProperty("LogicalProcessors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LogicalProcessor> LogicalProcessors { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class ProcessParameters
    {
        [Newtonsoft.Json.JsonProperty("ApplicationName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApplicationName { get; set; }

        [Newtonsoft.Json.JsonProperty("CommandLine", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CommandLine { get; set; }

        /// <summary>
        /// optional alternative to CommandLine, currently only supported by Linux GCS
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CommandArgs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> CommandArgs { get; set; }

        [Newtonsoft.Json.JsonProperty("User", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string User { get; set; }

        [Newtonsoft.Json.JsonProperty("WorkingDirectory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WorkingDirectory { get; set; }

        [Newtonsoft.Json.JsonProperty("Environment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> Environment { get; set; }

        /// <summary>
        /// if set, will run as low-privilege process
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RestrictedToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RestrictedToken { get; set; }

        /// <summary>
        /// if set, ignore StdErrPipe
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EmulateConsole", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EmulateConsole { get; set; }

        [Newtonsoft.Json.JsonProperty("CreateStdInPipe", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CreateStdInPipe { get; set; }

        [Newtonsoft.Json.JsonProperty("CreateStdOutPipe", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CreateStdOutPipe { get; set; }

        [Newtonsoft.Json.JsonProperty("CreateStdErrPipe", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CreateStdErrPipe { get; set; }

        /// <summary>
        /// height then width
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ConsoleSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> ConsoleSize { get; set; }

        /// <summary>
        /// if set, find an existing session for the user and create the process in it
        /// </summary>
        [Newtonsoft.Json.JsonProperty("UseExistingLogin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UseExistingLogin { get; set; }

        /// <summary>
        /// if set, use the legacy console instead of conhost
        /// </summary>
        [Newtonsoft.Json.JsonProperty("UseLegacyConsole", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UseLegacyConsole { get; set; }

    }

    /// <summary>
    /// Provided in the EventData parameter of an HcsEventProcessExited HCS_EVENT.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class ProcessStatus
    {
        /// <summary>
        /// The process id (PID) of the process.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ProcessId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ProcessId { get; set; }

        /// <summary>
        /// True if the process has exited, false if it has not exited yet.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Exited", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Exited { get; set; }

        /// <summary>
        /// Exit code of the process. The ExitCode is valid only if LastWaitResult is S_OK and Exited is true.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ExitCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ExitCode { get; set; }

        /// <summary>
        /// Status of waiting for process exit. S_OK indicates success. Other HRESULT values on error.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("LastWaitResult", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LastWaitResult { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Properties
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("SystemType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SystemType? SystemType { get; set; }

        [Newtonsoft.Json.JsonProperty("RuntimeOsType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OsType? RuntimeOsType { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Owner { get; set; }

        [Newtonsoft.Json.JsonProperty("RuntimeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9A-Fa-f]{8}-([0-9A-Fa-f]{4}-){3}[0-9A-Fa-f]{12}$")]
        public string RuntimeId { get; set; }

        [Newtonsoft.Json.JsonProperty("RuntimeTemplateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RuntimeTemplateId { get; set; }

        [Newtonsoft.Json.JsonProperty("State", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public State? State { get; set; }

        [Newtonsoft.Json.JsonProperty("Stopped", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Stopped { get; set; }

        [Newtonsoft.Json.JsonProperty("ExitType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public NotificationType? ExitType { get; set; }

        [Newtonsoft.Json.JsonProperty("Memory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MemoryInformationForVm Memory { get; set; }

        [Newtonsoft.Json.JsonProperty("Statistics", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Statistics Statistics { get; set; }

        [Newtonsoft.Json.JsonProperty("ProcessList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ProcessDetails> ProcessList { get; set; }

        [Newtonsoft.Json.JsonProperty("TerminateOnLastHandleClosed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? TerminateOnLastHandleClosed { get; set; }

        [Newtonsoft.Json.JsonProperty("HostingSystemId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HostingSystemId { get; set; }

        [Newtonsoft.Json.JsonProperty("SharedMemoryRegionInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SharedMemoryRegionInfo> SharedMemoryRegionInfo { get; set; }

        [Newtonsoft.Json.JsonProperty("GuestConnectionInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GuestConnectionInfo GuestConnectionInfo { get; set; }

        /// <summary>
        /// This is a new response object, introduced in version 2.5, which maps the requested property names to their associated response objects.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PropertyResponses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, PropertyResponse> PropertyResponses { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class PropertyResponse
    {
        [Newtonsoft.Json.JsonProperty("Error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResultError Error { get; set; }

        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Response { get; set; }

    }

    /// <summary>
    /// Quality of Service (QoS) capabilities
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class QoSCapabilities
    {
        /// <summary>
        /// Whether or not processor QoS is supported
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ProcessorQoSSupported", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ProcessorQoSSupported { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class RdpConnectionOptions
    {
        [Newtonsoft.Json.JsonProperty("AccessSids", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> AccessSids { get; set; }

        [Newtonsoft.Json.JsonProperty("NamedPipe", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NamedPipe { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class RegistryChanges
    {
        [Newtonsoft.Json.JsonProperty("AddValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RegistryValue> AddValues { get; set; }

        [Newtonsoft.Json.JsonProperty("DeleteKeys", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RegistryKey> DeleteKeys { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class RegistryDeleteKey
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

    }

    /// <summary>
    /// Represents the flush state of the registry hive for a Windows container's job object.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class RegistryFlushState
    {
        /// <summary>
        /// Determines whether the flush state of the registry hive is enabled or not. When not enabled, flushes are ignored and changes to the registry are not preserved.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Enabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Enabled { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class RegistryHiveStack
    {
        [Newtonsoft.Json.JsonProperty("hive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Hive { get; set; }

        [Newtonsoft.Json.JsonProperty("layer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RegistryLayer> Layer { get; set; }

        [Newtonsoft.Json.JsonProperty("mkkey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RegistryMakeKey> Mkkey { get; set; }

        [Newtonsoft.Json.JsonProperty("delkey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RegistryDeleteKey> Delkey { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class RegistryKey
    {
        [Newtonsoft.Json.JsonProperty("Hive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RegistryHive? Hive { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Volatile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Volatile { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class RegistryLayer
    {
        [Newtonsoft.Json.JsonProperty("hosthive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Hosthive { get; set; }

        [Newtonsoft.Json.JsonProperty("filepath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Filepath { get; set; }

        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9A-Fa-f]{8}-([0-9A-Fa-f]{4}-){3}[0-9A-Fa-f]{12}$")]
        public string Identifier { get; set; }

        [Newtonsoft.Json.JsonProperty("readonly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Readonly { get; set; }

        [Newtonsoft.Json.JsonProperty("immutable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Immutable { get; set; }

        [Newtonsoft.Json.JsonProperty("inherittrustclass", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Inherittrustclass { get; set; }

        [Newtonsoft.Json.JsonProperty("trustedhive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Trustedhive { get; set; }

        [Newtonsoft.Json.JsonProperty("writethrough", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Writethrough { get; set; }

        /// <summary>
        /// The FileAccessToken field should only be used in-memory and not serialized/deserialized, since it refers to a token handle.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fileaccesstoken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Fileaccesstoken { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class RegistryMakeKey
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("clonesd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Clonesd { get; set; }

        [Newtonsoft.Json.JsonProperty("mkkey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RegistryMakeKey> Mkkey { get; set; }

        [Newtonsoft.Json.JsonProperty("mkvalue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RegistryMakeValue> Mkvalue { get; set; }

        [Newtonsoft.Json.JsonProperty("volatile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Volatile { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class RegistryMakeValue
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("data_multistring", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Data_multistring { get; set; }

        [Newtonsoft.Json.JsonProperty("data_dword", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Data_dword { get; set; }

        [Newtonsoft.Json.JsonProperty("data_string", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Data_string { get; set; }

        [Newtonsoft.Json.JsonProperty("data_binary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public byte[] Data_binary { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class RegistryNamespace
    {
        [Newtonsoft.Json.JsonProperty("symlink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RegistrySymlink> Symlink { get; set; }

        [Newtonsoft.Json.JsonProperty("redirectionnode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RegistryRedirectionNode> Redirectionnode { get; set; }

        [Newtonsoft.Json.JsonProperty("hivestack", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RegistryHiveStack> Hivestack { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class RegistryRedirectionNode
    {
        [Newtonsoft.Json.JsonProperty("containerpath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Containerpath { get; set; }

        [Newtonsoft.Json.JsonProperty("hostpath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Hostpath { get; set; }

        [Newtonsoft.Json.JsonProperty("hivestack", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Hivestack { get; set; }

        [Newtonsoft.Json.JsonProperty("access_mask", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Access_mask { get; set; }

        [Newtonsoft.Json.JsonProperty("trustedhive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Trustedhive { get; set; }

        [Newtonsoft.Json.JsonProperty("exitnode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Exitnode { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class RegistrySymlink
    {
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        [Newtonsoft.Json.JsonProperty("target", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Target { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class RegistryValue
    {
        [Newtonsoft.Json.JsonProperty("Key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RegistryKey Key { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RegistryValueType? Type { get; set; }

        /// <summary>
        /// One and only one value type must be set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("StringValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StringValue { get; set; }

        [Newtonsoft.Json.JsonProperty("BinaryValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public byte[] BinaryValue { get; set; }

        [Newtonsoft.Json.JsonProperty("DWordValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DWordValue { get; set; }

        [Newtonsoft.Json.JsonProperty("QWordValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? QWordValue { get; set; }

        /// <summary>
        /// Only used if RegistryValueType is CustomType The data is in BinaryValue
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CustomType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CustomType { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class RestoreState
    {
        /// <summary>
        /// The path to the save state file to restore the system from.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SaveStateFilePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SaveStateFilePath { get; set; }

        /// <summary>
        /// The ID of the template system to clone this new system off of. An empty string indicates the system should not be cloned from a template.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TemplateSystemId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TemplateSystemId { get; set; }

    }

    /// <summary>
    /// Extended error information returned by the HCS
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class ResultError
    {
        /// <summary>
        /// HRESULT error code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Error { get; set; }

        /// <summary>
        /// Error message
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ErrorMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorMessage { get; set; }

        /// <summary>
        /// Error event details
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ErrorEvents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ErrorEvent> ErrorEvents { get; set; }

        /// <summary>
        /// Attribution record
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Attribution", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AttributionRecord> Attribution { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class SaveOptions
    {
        [Newtonsoft.Json.JsonProperty("SaveType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SaveType? SaveType { get; set; }

        /// <summary>
        /// The path to the file that will container the saved state.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SaveStateFilePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SaveStateFilePath { get; set; }

    }

    /// <summary>
    /// Object describing a SCSI controller.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Scsi
    {
        /// <summary>
        /// Map of attachments, where the key is the integer LUN number on the controller.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Attachments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, Attachment> Attachments { get; set; }

        /// <summary>
        /// Disable interrupt batching (MNF) for storage to decrease latency and increase throughput, at per-interrupt processing cost.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DisableInterruptBatching", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DisableInterruptBatching { get; set; }

    }

    /// <summary>
    /// Structure used to perform property query
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Service_PropertyQuery
    {
        /// <summary>
        /// Specifies the property array to query
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PropertyTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<GetPropertyType> PropertyTypes { get; set; }

        [Newtonsoft.Json.JsonProperty("PropertyQueries", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> PropertyQueries { get; set; }

    }

    /// <summary>
    /// Properties of the host
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class ServiceProperties
    {
        /// <summary>
        /// The service properties will be returned as an array corresponding to the requested property types.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<object> Properties { get; set; }

        /// <summary>
        /// This is a response object, introduced in version 2.5, which takes the name of the property and its associated query object if needed
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PropertyResponses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, PropertyResponse> PropertyResponses { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Services
    {
        [Newtonsoft.Json.JsonProperty("Heartbeat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Heartbeat Heartbeat { get; set; }

        [Newtonsoft.Json.JsonProperty("Shutdown", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Shutdown Shutdown { get; set; }

        [Newtonsoft.Json.JsonProperty("Timesync", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Timesync Timesync { get; set; }

        [Newtonsoft.Json.JsonProperty("KvpExchange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public KvpExchange KvpExchange { get; set; }

    }

    /// <summary>
    /// Set properties operation settings
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class SetPropertyOperation
    {
        [Newtonsoft.Json.JsonProperty("GroupId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9A-Fa-f]{8}-([0-9A-Fa-f]{4}-){3}[0-9A-Fa-f]{12}$")]
        public string GroupId { get; set; }

        [Newtonsoft.Json.JsonProperty("PropertyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PropertyCode { get; set; }

        [Newtonsoft.Json.JsonProperty("PropertyValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PropertyValue { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class SharedMemoryConfiguration
    {
        [Newtonsoft.Json.JsonProperty("Regions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SharedMemoryRegion> Regions { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class SharedMemoryRegion
    {
        [Newtonsoft.Json.JsonProperty("SectionName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SectionName { get; set; }

        [Newtonsoft.Json.JsonProperty("StartOffset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? StartOffset { get; set; }

        [Newtonsoft.Json.JsonProperty("Length", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Length { get; set; }

        [Newtonsoft.Json.JsonProperty("AllowGuestWrite", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AllowGuestWrite { get; set; }

        [Newtonsoft.Json.JsonProperty("HiddenFromGuest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HiddenFromGuest { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class SharedMemoryRegionInfo
    {
        [Newtonsoft.Json.JsonProperty("SectionName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SectionName { get; set; }

        [Newtonsoft.Json.JsonProperty("GuestPhysicalAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GuestPhysicalAddress { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Shutdown
    {

    }

    /// <summary>
    /// Options for HcsShutdownComputeSystem
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class ShutdownOptions
    {
        [Newtonsoft.Json.JsonProperty("Mechanism", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ShutdownMechanism? Mechanism { get; set; }

        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ShutdownType? Type { get; set; }

        /// <summary>
        /// If this shutdown is forceful or not
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Force", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Force { get; set; }

        /// <summary>
        /// Reason for the shutdown
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Reason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reason { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class SignalProcessOptions
    {
        [Newtonsoft.Json.JsonProperty("Signal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProcessSignal? Signal { get; set; }

    }

    /// <summary>
    /// Runtime statistics for a container
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Statistics
    {
        [Newtonsoft.Json.JsonProperty("Timestamp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Timestamp { get; set; }

        [Newtonsoft.Json.JsonProperty("ContainerStartTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ContainerStartTime { get; set; }

        [Newtonsoft.Json.JsonProperty("Uptime100ns", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Uptime100ns { get; set; }

        [Newtonsoft.Json.JsonProperty("Processor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProcessorStats Processor { get; set; }

        [Newtonsoft.Json.JsonProperty("Memory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MemoryStats Memory { get; set; }

        [Newtonsoft.Json.JsonProperty("Storage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StorageStats Storage { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Storage
    {
        /// <summary>
        /// List of layers that describe the parent hierarchy for a container's storage. These layers combined together, presented as a disposable and/or committable working storage, are used by the container to record all changes done to the parent layers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Layers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Layer> Layers { get; set; }

        /// <summary>
        /// Path that points to the scratch space of a container, where parent layers are combined together to present a new disposable and/or committable layer with the changes done during its runtime.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path { get; set; }

        [Newtonsoft.Json.JsonProperty("QoS", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StorageQoS QoS { get; set; }

    }

    /// <summary>
    /// Describes storage quality of service settings, relative to a storage volume.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class StorageQoS
    {
        /// <summary>
        /// Defines the maximum allowed Input/Output operations per second in a volume.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("IopsMaximum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IopsMaximum { get; set; }

        /// <summary>
        /// Defines the maximum bandwidth (bytes per second) allowed in a volume.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("BandwidthMaximum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BandwidthMaximum { get; set; }

    }

    /// <summary>
    /// Storage runtime statistics
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class StorageStats
    {
        [Newtonsoft.Json.JsonProperty("ReadCountNormalized", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ReadCountNormalized { get; set; }

        [Newtonsoft.Json.JsonProperty("ReadSizeBytes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ReadSizeBytes { get; set; }

        [Newtonsoft.Json.JsonProperty("WriteCountNormalized", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? WriteCountNormalized { get; set; }

        [Newtonsoft.Json.JsonProperty("WriteSizeBytes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? WriteSizeBytes { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Subnode
    {
        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SubnodeType? Type { get; set; }

        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

    }

    /// <summary>
    /// By default the basic properties will be returned. This query provides a way to request specific properties.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class System_PropertyQuery
    {
        [Newtonsoft.Json.JsonProperty("PropertyTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<System_PropertyType> PropertyTypes { get; set; }

        /// <summary>
        /// This is a new property request object, introduced in version 2.5, which takes the names of the properties and their associated query objects if needed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Queries", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Queries { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class SystemExit
    {
        [Newtonsoft.Json.JsonProperty("Detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SystemExitDetail? Detail { get; set; }

        [Newtonsoft.Json.JsonProperty("Initiator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ExitInitiator? Initiator { get; set; }

    }

    /// <summary>
    /// Document provided in the EventData parameter of an HcsEventSystemExited HCS_EVENT.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class SystemExitStatus
    {
        /// <summary>
        /// Exit status (HRESULT) for the system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Status { get; set; }

        [Newtonsoft.Json.JsonProperty("ExitType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public NotificationType? ExitType { get; set; }

        [Newtonsoft.Json.JsonProperty("Attribution", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AttributionRecord> Attribution { get; set; }

    }

    /// <summary>
    /// Structure used to request a system processor modification
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class SystemProcessorModificationRequest
    {
        [Newtonsoft.Json.JsonProperty("GroupId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9A-Fa-f]{8}-([0-9A-Fa-f]{4}-){3}[0-9A-Fa-f]{12}$")]
        public string GroupId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class SystemQuery
    {
        [Newtonsoft.Json.JsonProperty("Ids", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Ids { get; set; }

        [Newtonsoft.Json.JsonProperty("Names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Names { get; set; }

        [Newtonsoft.Json.JsonProperty("Types", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<SystemType> Types { get; set; }

        [Newtonsoft.Json.JsonProperty("Owners", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Owners { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class SystemTime
    {
        [Newtonsoft.Json.JsonProperty("Year", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Year { get; set; }

        [Newtonsoft.Json.JsonProperty("Month", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Month { get; set; }

        [Newtonsoft.Json.JsonProperty("DayOfWeek", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DayOfWeek { get; set; }

        [Newtonsoft.Json.JsonProperty("Day", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Day { get; set; }

        [Newtonsoft.Json.JsonProperty("Hour", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Hour { get; set; }

        [Newtonsoft.Json.JsonProperty("Minute", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Minute { get; set; }

        [Newtonsoft.Json.JsonProperty("Second", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Second { get; set; }

        [Newtonsoft.Json.JsonProperty("Milliseconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Milliseconds { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Timesync
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class TimeZoneInformation
    {
        [Newtonsoft.Json.JsonProperty("Bias", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Bias { get; set; }

        [Newtonsoft.Json.JsonProperty("StandardName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StandardName { get; set; }

        [Newtonsoft.Json.JsonProperty("StandardDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SystemTime StandardDate { get; set; }

        [Newtonsoft.Json.JsonProperty("StandardBias", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? StandardBias { get; set; }

        [Newtonsoft.Json.JsonProperty("DaylightName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DaylightName { get; set; }

        [Newtonsoft.Json.JsonProperty("DaylightDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SystemTime DaylightDate { get; set; }

        [Newtonsoft.Json.JsonProperty("DaylightBias", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DaylightBias { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Topology
    {
        [Newtonsoft.Json.JsonProperty("Memory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VirtualMachine_Memory Memory { get; set; }

        [Newtonsoft.Json.JsonProperty("Processor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VirtualMachine_Processor Processor { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class TripleFault
    {
        [Newtonsoft.Json.JsonProperty("ErrorType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ErrorType { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Uefi
    {
        [Newtonsoft.Json.JsonProperty("EnableDebugger", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EnableDebugger { get; set; }

        [Newtonsoft.Json.JsonProperty("SecureBootTemplateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9A-Fa-f]{8}-([0-9A-Fa-f]{4}-){3}[0-9A-Fa-f]{12}$")]
        public string SecureBootTemplateId { get; set; }

        [Newtonsoft.Json.JsonProperty("ApplySecureBootTemplate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ApplySecureBootTemplateType? ApplySecureBootTemplate { get; set; }

        [Newtonsoft.Json.JsonProperty("BootThis", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UefiBootEntry BootThis { get; set; }

        [Newtonsoft.Json.JsonProperty("Console", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SerialConsole? Console { get; set; }

        [Newtonsoft.Json.JsonProperty("StopOnBootFailure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? StopOnBootFailure { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class UefiBootEntry
    {
        [Newtonsoft.Json.JsonProperty("DeviceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UefiBootDevice? DeviceType { get; set; }

        [Newtonsoft.Json.JsonProperty("DevicePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DevicePath { get; set; }

        [Newtonsoft.Json.JsonProperty("DiskNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DiskNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("OptionalData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OptionalData { get; set; }

        [Newtonsoft.Json.JsonProperty("VmbFsRootPath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VmbFsRootPath { get; set; }

    }

    /// <summary>
    /// Object that describes a version with a Major.Minor format.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Version
    {
        /// <summary>
        /// The major version value. Individual major versions are not compatible with one another.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Major", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Major { get; set; }

        /// <summary>
        /// The minor version value. A lower minor version is considered a compatible subset of a higher minor version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Minor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Minor { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class VideoMonitor
    {
        [Newtonsoft.Json.JsonProperty("HorizontalResolution", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HorizontalResolution { get; set; }

        [Newtonsoft.Json.JsonProperty("VerticalResolution", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? VerticalResolution { get; set; }

        [Newtonsoft.Json.JsonProperty("ConnectionOptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RdpConnectionOptions ConnectionOptions { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class VirtioSerial
    {
        [Newtonsoft.Json.JsonProperty("Ports", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, VirtioSerialPort> Ports { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class VirtioSerialPort
    {
        /// <summary>
        /// Pipe name to connect to this port from the host.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("NamedPipe", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NamedPipe { get; set; }

        /// <summary>
        /// Friendly name provided to the guest.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Indicates to the guest that this port can be used as a console.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ConsoleSupport", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ConsoleSupport { get; set; }

    }

    /// <summary>
    /// Provides information on failures originated by a virtual device.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class VirtualDeviceFailure
    {
        [Newtonsoft.Json.JsonProperty("Detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VirtualDeviceFailureDetail? Detail { get; set; }

        /// <summary>
        /// Friendly name of the virtual device.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Id of the virtual device.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DeviceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9A-Fa-f]{8}-([0-9A-Fa-f]{4}-){3}[0-9A-Fa-f]{12}$")]
        public string DeviceId { get; set; }

        /// <summary>
        /// Instance Id of the virtual device.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("InstanceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9A-Fa-f]{8}-([0-9A-Fa-f]{4}-){3}[0-9A-Fa-f]{12}$")]
        public string InstanceId { get; set; }

    }

    /// <summary>
    /// Configuration of a virtual machine, used during its creation to set up and/or use resources.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class VirtualMachine
    {
        [Newtonsoft.Json.JsonProperty("Version", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Version Version { get; set; }

        /// <summary>
        /// When set to true, the virtual machine will treat a reset as a stop, releasing resources and cleaning up state.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("StopOnReset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? StopOnReset { get; set; }

        [Newtonsoft.Json.JsonProperty("Chipset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Chipset Chipset { get; set; }

        [Newtonsoft.Json.JsonProperty("ComputeTopology", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Topology ComputeTopology { get; set; }

        [Newtonsoft.Json.JsonProperty("Devices", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Devices Devices { get; set; }

        [Newtonsoft.Json.JsonProperty("Services", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Services Services { get; set; }

        [Newtonsoft.Json.JsonProperty("GuestState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GuestState GuestState { get; set; }

        [Newtonsoft.Json.JsonProperty("RestoreState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RestoreState RestoreState { get; set; }

        [Newtonsoft.Json.JsonProperty("RegistryChanges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RegistryChanges RegistryChanges { get; set; }

        [Newtonsoft.Json.JsonProperty("StorageQoS", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StorageQoS StorageQoS { get; set; }

        [Newtonsoft.Json.JsonProperty("GuestConnection", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GuestConnection GuestConnection { get; set; }

    }

    /// <summary>
    /// HvSocket configuration for a VM
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class VirtualMachine_HvSocket
    {
        [Newtonsoft.Json.JsonProperty("HvSocketConfig", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HvSocketSystemConfig HvSocketConfig { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class VirtualMachine_Memory
    {
        [Newtonsoft.Json.JsonProperty("SizeInMB", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SizeInMB { get; set; }

        /// <summary>
        /// If enabled, then the VM's memory is backed by the Windows pagefile rather than physically backed, statically allocated memory.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AllowOvercommit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AllowOvercommit { get; set; }

        [Newtonsoft.Json.JsonProperty("BackingPageSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MemoryBackingPageSize? BackingPageSize { get; set; }

        /// <summary>
        /// Fault clustering size for primary RAM.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FaultClusterSizeShift", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FaultClusterSizeShift { get; set; }

        /// <summary>
        /// Fault clustering size for direct mapped memory.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DirectMapFaultClusterSizeShift", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DirectMapFaultClusterSizeShift { get; set; }

        /// <summary>
        /// If enabled, then each backing page is physically pinned on first access.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PinBackingPages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PinBackingPages { get; set; }

        /// <summary>
        /// If enabled, then backing page chunks smaller than the backing page size are never used unless the system is under extreme memory pressure. If the backing page size is Small, then it is forced to Large when this option is enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ForbidSmallBackingPages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ForbidSmallBackingPages { get; set; }

        /// <summary>
        /// If enabled, then the memory hot hint feature is exposed to the VM, allowing it to prefetch pages into its working set. (if supported by the guest operating system).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EnableHotHint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EnableHotHint { get; set; }

        /// <summary>
        /// If enabled, then the memory cold hint feature is exposed to the VM, allowing it to trim zeroed pages from its working set (if supported by the guest operating system).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EnableColdHint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EnableColdHint { get; set; }

        /// <summary>
        /// If enabled, then the memory cold discard hint feature is exposed to the VM, allowing it to trim non-zeroed pages from the working set (if supported by the guest operating system).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EnableColdDiscardHint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EnableColdDiscardHint { get; set; }

        /// <summary>
        /// If enabled, then commit is not charged for each backing page until first access.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EnableDeferredCommit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EnableDeferredCommit { get; set; }

        /// <summary>
        /// Low MMIO region allocated below 4GB
        /// </summary>
        [Newtonsoft.Json.JsonProperty("LowMmioGapInMB", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LowMmioGapInMB { get; set; }

        /// <summary>
        /// High MMIO region allocated above 4GB (base and size)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("HighMmioBaseInMB", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HighMmioBaseInMB { get; set; }

        [Newtonsoft.Json.JsonProperty("HighMmioGapInMB", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HighMmioGapInMB { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class VirtualMachine_Processor
    {
        [Newtonsoft.Json.JsonProperty("Count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        [Newtonsoft.Json.JsonProperty("Limit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Limit { get; set; }

        [Newtonsoft.Json.JsonProperty("Weight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Weight { get; set; }

        [Newtonsoft.Json.JsonProperty("Reservation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Reservation { get; set; }

        /// <summary>
        /// Provides the target maximum CPU frequency, in MHz, for a virtual machine.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MaximumFrequencyMHz", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaximumFrequencyMHz { get; set; }

        [Newtonsoft.Json.JsonProperty("ExposeVirtualizationExtensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ExposeVirtualizationExtensions { get; set; }

        [Newtonsoft.Json.JsonProperty("EnablePerfmonPmu", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EnablePerfmonPmu { get; set; }

        [Newtonsoft.Json.JsonProperty("EnablePerfmonPebs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EnablePerfmonPebs { get; set; }

        [Newtonsoft.Json.JsonProperty("EnablePerfmonLbr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EnablePerfmonLbr { get; set; }

        [Newtonsoft.Json.JsonProperty("EnablePerfmonIpt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EnablePerfmonIpt { get; set; }

        [Newtonsoft.Json.JsonProperty("CpuGroup", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CpuGroup CpuGroup { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class VirtualNodeInfo
    {
        [Newtonsoft.Json.JsonProperty("VirtualNodeIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? VirtualNodeIndex { get; set; }

        [Newtonsoft.Json.JsonProperty("PhysicalNodeNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PhysicalNodeNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("VirtualProcessorCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? VirtualProcessorCount { get; set; }

        [Newtonsoft.Json.JsonProperty("MemoryUsageInPages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MemoryUsageInPages { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class VirtualPciDevice
    {
        [Newtonsoft.Json.JsonProperty("Functions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<VirtualPciFunction> Functions { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class VirtualPciFunction
    {
        [Newtonsoft.Json.JsonProperty("DeviceInstancePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeviceInstancePath { get; set; }

        [Newtonsoft.Json.JsonProperty("VirtualFunction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? VirtualFunction { get; set; }

        [Newtonsoft.Json.JsonProperty("AllowDirectTranslatedP2P", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AllowDirectTranslatedP2P { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class VirtualPMemController
    {
        [Newtonsoft.Json.JsonProperty("Devices", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, VirtualPMemDevice> Devices { get; set; }

        /// <summary>
        /// This field indicates how many empty devices to add to the controller. If non-zero, additional VirtualPMemDevice objects with no HostPath and no Mappings will be added to the Devices map to get up to the MaximumCount. These devices will be configured with either the MaximumSizeBytes field if non-zero, or with the default maximum, 512 Mb.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MaximumCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaximumCount { get; set; }

        [Newtonsoft.Json.JsonProperty("MaximumSizeBytes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaximumSizeBytes { get; set; }

        [Newtonsoft.Json.JsonProperty("Backing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VirtualPMemBackingType? Backing { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class VirtualPMemDevice
    {
        [Newtonsoft.Json.JsonProperty("HostPath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HostPath { get; set; }

        [Newtonsoft.Json.JsonProperty("ReadOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ReadOnly { get; set; }

        [Newtonsoft.Json.JsonProperty("ImageFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VirtualPMemImageFormat? ImageFormat { get; set; }

        [Newtonsoft.Json.JsonProperty("SizeBytes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SizeBytes { get; set; }

        [Newtonsoft.Json.JsonProperty("Mappings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, VirtualPMemMapping> Mappings { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class VirtualPMemMapping
    {
        [Newtonsoft.Json.JsonProperty("HostPath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HostPath { get; set; }

        [Newtonsoft.Json.JsonProperty("ImageFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VirtualPMemImageFormat? ImageFormat { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class VirtualSmb
    {
        [Newtonsoft.Json.JsonProperty("Shares", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<VirtualSmbShare> Shares { get; set; }

        [Newtonsoft.Json.JsonProperty("DirectFileMappingInMB", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? DirectFileMappingInMB { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class VirtualSmbShare
    {
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path { get; set; }

        [Newtonsoft.Json.JsonProperty("AllowedFiles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> AllowedFiles { get; set; }

        [Newtonsoft.Json.JsonProperty("Options", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VirtualSmbShareOptions Options { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class VirtualSmbShareOptions
    {
        [Newtonsoft.Json.JsonProperty("ReadOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ReadOnly { get; set; }

        /// <summary>
        /// convert exclusive access to shared read access
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ShareRead", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ShareRead { get; set; }

        /// <summary>
        /// all opens will use cached I/O
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CacheIo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CacheIo { get; set; }

        /// <summary>
        /// disable oplock support
        /// </summary>
        [Newtonsoft.Json.JsonProperty("NoOplocks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NoOplocks { get; set; }

        /// <summary>
        /// Acquire the backup privilege when attempting to open
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TakeBackupPrivilege", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? TakeBackupPrivilege { get; set; }

        /// <summary>
        /// Use the identity of the share root when opening
        /// </summary>
        [Newtonsoft.Json.JsonProperty("UseShareRootIdentity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UseShareRootIdentity { get; set; }

        /// <summary>
        /// disable Direct Mapping
        /// </summary>
        [Newtonsoft.Json.JsonProperty("NoDirectmap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NoDirectmap { get; set; }

        /// <summary>
        /// disable Byterange locks
        /// </summary>
        [Newtonsoft.Json.JsonProperty("NoLocks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NoLocks { get; set; }

        /// <summary>
        /// disable Directory CHange Notifications
        /// </summary>
        [Newtonsoft.Json.JsonProperty("NoDirnotify", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NoDirnotify { get; set; }

        /// <summary>
        /// share is use for VM shared memory
        /// </summary>
        [Newtonsoft.Json.JsonProperty("VmSharedMemory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? VmSharedMemory { get; set; }

        /// <summary>
        /// allow access only to the files specified in AllowedFiles
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RestrictFileAccess", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RestrictFileAccess { get; set; }

        /// <summary>
        /// disable all oplocks except Level II
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ForceLevelIIOplocks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ForceLevelIIOplocks { get; set; }

        /// <summary>
        /// Allow the host to reparse this base layer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ReparseBaseLayer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ReparseBaseLayer { get; set; }

        /// <summary>
        /// Enable pseudo-oplocks
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PseudoOplocks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PseudoOplocks { get; set; }

        /// <summary>
        /// All opens will use non-cached IO
        /// </summary>
        [Newtonsoft.Json.JsonProperty("NonCacheIo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NonCacheIo { get; set; }

        /// <summary>
        /// Enable pseudo directory change notifications
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PseudoDirnotify", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PseudoDirnotify { get; set; }

        /// <summary>
        /// Block directory enumeration, renames, and deletes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SingleFileMapping", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SingleFileMapping { get; set; }

        /// <summary>
        /// Support Cloud Files functionality
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SupportCloudFiles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SupportCloudFiles { get; set; }

        /// <summary>
        /// Filter EFS attributes from the guest
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FilterEncryptionAttributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? FilterEncryptionAttributes { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class VmMemory
    {
        [Newtonsoft.Json.JsonProperty("AvailableMemory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AvailableMemory { get; set; }

        [Newtonsoft.Json.JsonProperty("AvailableMemoryBuffer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AvailableMemoryBuffer { get; set; }

        [Newtonsoft.Json.JsonProperty("ReservedMemory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ReservedMemory { get; set; }

        [Newtonsoft.Json.JsonProperty("AssignedMemory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AssignedMemory { get; set; }

        [Newtonsoft.Json.JsonProperty("SlpActive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SlpActive { get; set; }

        [Newtonsoft.Json.JsonProperty("BalancingEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? BalancingEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("DmOperationInProgress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DmOperationInProgress { get; set; }

    }

    /// <summary>
    /// Windows specific crash information
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class WindowsCrashReport
    {
        /// <summary>
        /// Path to a Windows memory dump file. This will contain the same path as the configured in the GuestCrashReporting device. This field is not valid unless the FinalPhase is Complete.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DumpFile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DumpFile { get; set; }

        /// <summary>
        /// Major version as reported by the guest OS.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OsMajorVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OsMajorVersion { get; set; }

        /// <summary>
        /// Minor version as reported by the guest OS.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OsMinorVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OsMinorVersion { get; set; }

        /// <summary>
        /// Build number as reported by the guest OS.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OsBuildNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OsBuildNumber { get; set; }

        /// <summary>
        /// Service pack major version as reported by the guest OS.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OsServicePackMajorVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OsServicePackMajorVersion { get; set; }

        /// <summary>
        /// Service pack minor version as reported by the guest OS.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OsServicePackMinorVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OsServicePackMinorVersion { get; set; }

        /// <summary>
        /// Suite mask as reported by the guest OS.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OsSuiteMask", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OsSuiteMask { get; set; }

        /// <summary>
        /// Product type as reported by the guest OS.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OsProductType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OsProductType { get; set; }

        /// <summary>
        /// Status of the crash dump. S_OK indicates success, other HRESULT values on error.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Status { get; set; }

        [Newtonsoft.Json.JsonProperty("FinalPhase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public WindowsCrashPhase? FinalPhase { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class WindowsCrashReporting
    {
        [Newtonsoft.Json.JsonProperty("DumpFileName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DumpFileName { get; set; }

        [Newtonsoft.Json.JsonProperty("MaxDumpSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? MaxDumpSize { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class WorkerExit
    {
        /// <summary>
        /// Exit code of the virtual machine worker process.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ExitCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ExitCode { get; set; }

        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public WorkerExitType? Type { get; set; }

        [Newtonsoft.Json.JsonProperty("Detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public WorkerExitDetail? Detail { get; set; }

        [Newtonsoft.Json.JsonProperty("Initiator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ExitInitiator? Initiator { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum ApplySecureBootTemplateType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Skip")]
        Skip = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Apply")]
        Apply = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum AttachmentType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"VirtualDisk")]
        VirtualDisk = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Iso")]
        Iso = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PassThru")]
        PassThru = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum CacheMode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"")]
        Empty = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Disabled")]
        Disabled = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Enabled")]
        Enabled = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Private")]
        Private = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"PrivateAllowSharing")]
        PrivateAllowSharing = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum CachingMode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Uncached")]
        Uncached = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Cached")]
        Cached = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadOnlyCached")]
        ReadOnlyCached = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum ContainerCredentialGuardModifyOperation
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AddInstance")]
        AddInstance = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"RemoveInstance")]
        RemoveInstance = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum ContainerCredentialGuardTransport
    {

        [System.Runtime.Serialization.EnumMember(Value = @"LRPC")]
        LRPC = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"HvSocket")]
        HvSocket = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum CrashType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CrashGuest")]
        CrashGuest = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum DeviceType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ClassGuid")]
        ClassGuid = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DeviceInstance")]
        DeviceInstance = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"GpuMirror")]
        GpuMirror = 2,

    }

    /// <summary>
    /// Data types for event data elements, based on EVT_VARIANT_TYPE
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum EventDataType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Empty")]
        Empty = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"String")]
        String = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"AnsiString")]
        AnsiString = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"SByte")]
        SByte = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Byte")]
        Byte = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Int16")]
        Int16 = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"UInt16")]
        UInt16 = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Int32")]
        Int32 = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"UInt32")]
        UInt32 = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"Int64")]
        Int64 = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"UInt64")]
        UInt64 = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"Single")]
        Single = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"Double")]
        Double = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"Boolean")]
        Boolean = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"Binary")]
        Binary = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"Guid")]
        Guid = 15,

    }

    /// <summary>
    /// Initiator of an exit (guest, management client, etc.)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum ExitInitiator
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"GuestOS")]
        GuestOS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Client")]
        Client = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Internal")]
        Internal = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum FilesystemIsolationMode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"hard")]
        Hard = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"soft")]
        Soft = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum FilesystemNestingMode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"inner")]
        Inner = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"outer")]
        Outer = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum FlexibleIoDeviceHostingModel
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Internal")]
        Internal = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"External")]
        External = 1,

    }

    /// <summary>
    /// Service property type queried by HcsGetServiceProperties
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum GetPropertyType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Basic")]
        Basic = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CpuGroup")]
        CpuGroup = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ProcessorTopology")]
        ProcessorTopology = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ContainerCredentialGuard")]
        ContainerCredentialGuard = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"QoSCapabilities")]
        QoSCapabilities = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum GpuAssignmentMode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Disabled")]
        Disabled = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Default")]
        Default = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"List")]
        List = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Mirror")]
        Mirror = 3,

    }

    /// <summary>
    /// Possible reason for integration component's state
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum IntegrationComponentOperatingStateReason
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AppsInCriticalState")]
        AppsInCriticalState = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CommunicationTimedOut")]
        CommunicationTimedOut = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FailedCommunication")]
        FailedCommunication = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"HealthyApps")]
        HealthyApps = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ProtocolMismatch")]
        ProtocolMismatch = 5,

    }

    /// <summary>
    /// Operational status for integration component
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum IntegrationComponentOperationalState
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Degraded")]
        Degraded = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Dormant")]
        Dormant = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"LostCommunication")]
        LostCommunication = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"NonRecoverableError")]
        NonRecoverableError = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"NoContact")]
        NoContact = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Ok")]
        Ok = 7,

    }

    /// <summary>
    /// Enum used to specify how the interface class should be treated when applying a device extension/creating container symlinks. This enum is ordering-sensitive; if two interface classes with the same identifier are merged, the type of the resulting interface class is given by the larger enum value (e.g., DeviceInstance + ClassGuid = ClassGuid).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum InterfaceClassType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Inherit")]
        Inherit = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DeviceInstance")]
        DeviceInstance = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ClassGuid")]
        ClassGuid = 2,

    }

    /// <summary>
    /// The valid interrupt moderation modes for I/O virtualization (IOV) offloading.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum InterruptModerationMode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Default")]
        Default = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Adaptive")]
        Adaptive = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Off")]
        Off = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Low")]
        Low = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Medium")]
        Medium = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"High")]
        High = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum JobTerminationPolicy
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PermanentQuiescent")]
        PermanentQuiescent = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"KillOnHandleClose")]
        KillOnHandleClose = 1,

    }

    /// <summary>
    /// The source sets the location of the key-value pairs stored depending on the type of the key-value pairs
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum KvpSource
    {

        [System.Runtime.Serialization.EnumMember(Value = @"KvpSetByHost")]
        KvpSetByHost = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"KvpSetByGuest")]
        KvpSetByGuest = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"GuestOSInfo")]
        GuestOSInfo = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum MappedPipePathType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AbsolutePath")]
        AbsolutePath = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"VirtualSmbPipeName")]
        VirtualSmbPipeName = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum MemoryBackingPageSize
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Small")]
        Small = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Large")]
        Large = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum ModifyOperation
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ConsoleSize")]
        ConsoleSize = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CloseHandle")]
        CloseHandle = 1,

    }

    /// <summary>
    /// Service property type modified by HcsModifyServiceSettings
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum ModifyPropertyType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CpuGroup")]
        CpuGroup = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ContainerCredentialGuard")]
        ContainerCredentialGuard = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum ModifyRequestType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Add")]
        Add = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Remove")]
        Remove = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Update")]
        Update = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum ModifyResourceType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Memory")]
        Memory = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"MappedDirectory")]
        MappedDirectory = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"MappedPipe")]
        MappedPipe = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"MappedVirtualDisk")]
        MappedVirtualDisk = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"CombinedLayers")]
        CombinedLayers = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"NetworkNamespace")]
        NetworkNamespace = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"CimMount")]
        CimMount = 6,

    }

    /// <summary>
    /// Enumeration of different supported service processor modification requests
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum ModifyServiceOperation
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CreateGroup")]
        CreateGroup = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DeleteGroup")]
        DeleteGroup = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SetProperty")]
        SetProperty = 2,

    }

    /// <summary>
    /// Exit type of a compute system.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum NotificationType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"GracefulExit")]
        GracefulExit = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ForcedExit")]
        ForcedExit = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"UnexpectedExit")]
        UnexpectedExit = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum ObjectDirectoryShadow
    {

        [System.Runtime.Serialization.EnumMember(Value = @"false")]
        False = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"true")]
        True = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ifexists")]
        Ifexists = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum ObjectSymlinkScope
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Local")]
        Local = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Global")]
        Global = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"GlobalDropSilo")]
        GlobalDropSilo = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum OperationFailureDetail
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Invalid")]
        Invalid = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CreateInternalError")]
        CreateInternalError = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ConstructStateError")]
        ConstructStateError = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"RuntimeOsTypeMismatch")]
        RuntimeOsTypeMismatch = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Construct")]
        Construct = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Start")]
        Start = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Pause")]
        Pause = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Resume")]
        Resume = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Shutdown")]
        Shutdown = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"Terminate")]
        Terminate = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Save")]
        Save = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"GetProperties")]
        GetProperties = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"Modify")]
        Modify = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"Crash")]
        Crash = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"GuestCrash")]
        GuestCrash = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"LifecycleNotify")]
        LifecycleNotify = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"ExecuteProcess")]
        ExecuteProcess = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"GetProcessInfo")]
        GetProcessInfo = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"WaitForProcess")]
        WaitForProcess = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"SignalProcess")]
        SignalProcess = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"ModifyProcess")]
        ModifyProcess = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"PrepareForHosting")]
        PrepareForHosting = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"RegisterHostedSystem")]
        RegisterHostedSystem = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"UnregisterHostedSystem")]
        UnregisterHostedSystem = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"PrepareForClone")]
        PrepareForClone = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"GetCloneTemplate")]
        GetCloneTemplate = 25,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum OperationType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Construct")]
        Construct = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Start")]
        Start = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Pause")]
        Pause = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Resume")]
        Resume = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Shutdown")]
        Shutdown = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Terminate")]
        Terminate = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Save")]
        Save = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"GetProperties")]
        GetProperties = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"Modify")]
        Modify = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Crash")]
        Crash = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"ExecuteProcess")]
        ExecuteProcess = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"GetProcessInfo")]
        GetProcessInfo = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"SignalProcess")]
        SignalProcess = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"ModifyProcess")]
        ModifyProcess = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"CancelOperation")]
        CancelOperation = 15,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum OsLayerType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Container")]
        Container = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Vm")]
        Vm = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum OsType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"")]
        Empty = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Windows")]
        Windows = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Linux")]
        Linux = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum PathType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AbsolutePath")]
        AbsolutePath = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"VirtualSmbShareName")]
        VirtualSmbShareName = 1,

    }

    /// <summary>
    /// Pause reason that is indicated to components running in the Virtual Machine.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum PauseReason
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Save")]
        Save = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Template")]
        Template = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum PauseSuspensionLevel
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Suspend")]
        Suspend = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"MemoryLow")]
        MemoryLow = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"MemoryMedium")]
        MemoryMedium = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"MemoryHigh")]
        MemoryHigh = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum ProcessSignal
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CtrlC")]
        CtrlC = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CtrlBreak")]
        CtrlBreak = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CtrlClose")]
        CtrlClose = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CtrlLogOff")]
        CtrlLogOff = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"CtrlShutdown")]
        CtrlShutdown = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum RegistryHive
    {

        [System.Runtime.Serialization.EnumMember(Value = @"System")]
        System = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Software")]
        Software = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Security")]
        Security = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Sam")]
        Sam = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum RegistryValueType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"String")]
        String = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ExpandedString")]
        ExpandedString = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"MultiString")]
        MultiString = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Binary")]
        Binary = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"DWord")]
        DWord = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"QWord")]
        QWord = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"CustomType")]
        CustomType = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum SaveType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ToFile")]
        ToFile = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AsTemplate")]
        AsTemplate = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum SerialConsole
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Default")]
        Default = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Disabled")]
        Disabled = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ComPort1")]
        ComPort1 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ComPort2")]
        ComPort2 = 3,

    }

    /// <summary>
    /// Different mechanisms to perform a shutdown operation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum ShutdownMechanism
    {

        [System.Runtime.Serialization.EnumMember(Value = @"GuestConnection")]
        GuestConnection = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"IntegrationService")]
        IntegrationService = 1,

    }

    /// <summary>
    /// Different operations that are related or classified as a type of shutdown
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum ShutdownType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Shutdown")]
        Shutdown = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Hibernate")]
        Hibernate = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Reboot")]
        Reboot = 2,

    }

    /// <summary>
    /// Compute system state which is exposed to external clients
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum State
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Created")]
        Created = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Running")]
        Running = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Paused")]
        Paused = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Stopped")]
        Stopped = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"SavedAsTemplate")]
        SavedAsTemplate = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum StateOverride
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Default")]
        Default = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Disabled")]
        Disabled = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Enabled")]
        Enabled = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum StdHandle
    {

        [System.Runtime.Serialization.EnumMember(Value = @"StdIn")]
        StdIn = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"StdOut")]
        StdOut = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"StdErr")]
        StdErr = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"All")]
        All = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum SubnodeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Socket")]
        Socket = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Cluster")]
        Cluster = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"L3")]
        L3 = 3,

    }

    /// <summary>
    /// Compute system property types. The properties will be returned as a Schema.Responses.System.Properties instance.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum System_PropertyType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Memory")]
        Memory = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Statistics")]
        Statistics = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ProcessList")]
        ProcessList = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"TerminateOnLastHandleClosed")]
        TerminateOnLastHandleClosed = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"SharedMemoryRegion")]
        SharedMemoryRegion = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"GuestConnection")]
        GuestConnection = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum SystemExitDetail
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Invalid")]
        Invalid = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"HcsApiFatalError")]
        HcsApiFatalError = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceStop")]
        ServiceStop = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Shutdown")]
        Shutdown = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Terminate")]
        Terminate = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"UnexpectedExit")]
        UnexpectedExit = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum SystemType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Container")]
        Container = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"VirtualMachine")]
        VirtualMachine = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum UefiBootDevice
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ScsiDrive")]
        ScsiDrive = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"VmbFs")]
        VmbFs = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Network")]
        Network = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"File")]
        File = 3,

    }

    /// <summary>
    /// Provides detail on the context in which a virtual device failed.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum VirtualDeviceFailureDetail
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Create")]
        Create = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Initialize")]
        Initialize = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"StartReservingResources")]
        StartReservingResources = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FinishReservingResources")]
        FinishReservingResources = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FreeReservedResources")]
        FreeReservedResources = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"SaveReservedResources")]
        SaveReservedResources = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"PowerOnCold")]
        PowerOnCold = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"PowerOnRestore")]
        PowerOnRestore = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"PowerOff")]
        PowerOff = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Save")]
        Save = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"Resume")]
        Resume = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"Pause")]
        Pause = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"EnableOptimizations")]
        EnableOptimizations = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"StartDisableOptimizations")]
        StartDisableOptimizations = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"FinishDisableOptimizations")]
        FinishDisableOptimizations = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"Reset")]
        Reset = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"PostReset")]
        PostReset = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"Teardown")]
        Teardown = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"SaveCompatibilityInfo")]
        SaveCompatibilityInfo = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"MetricRestore")]
        MetricRestore = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"MetricEnumerate")]
        MetricEnumerate = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"MetricEnumerateForSave")]
        MetricEnumerateForSave = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"MetricReset")]
        MetricReset = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"MetricEnable")]
        MetricEnable = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"MetricDisable")]
        MetricDisable = 25,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum VirtualPMemBackingType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Virtual")]
        Virtual = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Physical")]
        Physical = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum VirtualPMemImageFormat
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Vhdx")]
        Vhdx = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Vhd1")]
        Vhd1 = 1,

    }

    /// <summary>
    /// Indicated the progress of a Windows memory dump in a WindowsCrashReport.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum WindowsCrashPhase
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Inactive")]
        Inactive = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CrashValues")]
        CrashValues = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Starting")]
        Starting = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Started")]
        Started = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Writing")]
        Writing = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Complete")]
        Complete = 5,

    }

    /// <summary>
    /// Detailed reasons for a VM stop
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum WorkerExitDetail
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Invalid")]
        Invalid = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PowerOff")]
        PowerOff = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PowerOffCritical")]
        PowerOffCritical = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Reset")]
        Reset = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"GuestCrash")]
        GuestCrash = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"GuestFirmwareCrash")]
        GuestFirmwareCrash = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"TripleFault")]
        TripleFault = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"DeviceFatalApicRequest")]
        DeviceFatalApicRequest = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"DeviceFatalMsrRequest")]
        DeviceFatalMsrRequest = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"DeviceFatalException")]
        DeviceFatalException = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"DeviceFatalError")]
        DeviceFatalError = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"DeviceMachineCheck")]
        DeviceMachineCheck = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"EmulatorError")]
        EmulatorError = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"VidTerminate")]
        VidTerminate = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"ProcessUnexpectedExit")]
        ProcessUnexpectedExit = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"InitializationFailure")]
        InitializationFailure = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"InitializationStartTimeout")]
        InitializationStartTimeout = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"ColdStartFailure")]
        ColdStartFailure = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"ResetStartFailure")]
        ResetStartFailure = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"FastRestoreStartFailure")]
        FastRestoreStartFailure = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"RestoreStartFailure")]
        RestoreStartFailure = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"FastSavePreservePartition")]
        FastSavePreservePartition = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"FastSavePreservePartitionHandleTransfer")]
        FastSavePreservePartitionHandleTransfer = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"FastSave")]
        FastSave = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"CloneTemplate")]
        CloneTemplate = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"Save")]
        Save = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"Migrate")]
        Migrate = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"MigrateFailure")]
        MigrateFailure = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"CannotReferenceVm")]
        CannotReferenceVm = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"MgotUnregister")]
        MgotUnregister = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"FastSavePreservePartitionHandleTransferStorage")]
        FastSavePreservePartitionHandleTransferStorage = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"FastSavePreservePartitionHandleTransferNetworking")]
        FastSavePreservePartitionHandleTransferNetworking = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"FastSavePreservePartitionHandleTransferStorageAndNetworking")]
        FastSavePreservePartitionHandleTransferStorageAndNetworking = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"FastSavePreservePartitionHsr")]
        FastSavePreservePartitionHsr = 33,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum WorkerExitType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"InitializationFailed")]
        InitializationFailed = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Stopped")]
        Stopped = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Saved")]
        Saved = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"StoppedOnReset")]
        StoppedOnReset = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"UnexpectedStop")]
        UnexpectedStop = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"ResetFailed")]
        ResetFailed = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"UnrecoverableError")]
        UnrecoverableError = 7,

    }



}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603