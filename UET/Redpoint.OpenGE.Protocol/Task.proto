syntax = "proto3";

package Redpoint.OpenGE.Protocol;

import "Process.proto";
import "TaskDescriptor.proto";

/**
 * Sent by the client at the start of the streaming call to
 * request that a core be reserved on the remote worker for 
 * this piece of work. A client should only be trying to
 * reserve one core per worker at a time, to reduce how many
 * streaming RPCs are open at any given time to a worker.
 *
 * Once a worker reserves a core for a client, a second
 * ReserveCoreAndExecuteTask call can be issued if the client
 * still has more work to schedule.
 */
message ReserveCoreRequest {
}

/**
 * Sent by the worker when a core has been reserved.
 */
message ReserveCoreResponse {
	string workerMachineName = 1;
	int32 workerCoreNumber = 2;
}

/**
 * Sent by a client to query whether or not a tool is
 * already available on a remote worker.
 */
message QueryToolRequest {
	int64 toolXxHash64 = 1;
}

/**
 * Sent by a worker in response to QueryToolRequest to
 * indicate whether the tool is present.
 */
message QueryToolResponse {
	bool present = 1;
}

/**
 * Describes a blob that a worker might have stored.
 */
message ToolBlob {
	int64 xxHash64 = 1;
	string localHintPath = 2;
}

/**
 * Sent by a client to query which tool blobs are
 * already present on a remote worker.
 */
message HasToolBlobsRequest {
	repeated ToolBlob toolBlobs = 1;
}

/**
 * Describes whether a tool blob is present on the
 * worker.
 */
message ToolBlobExistence {
	int64 xxHash64 = 1;
	bool exists = 2;
}

/**
 * Sent by a worker in response to HasToolBlobsRequest
 * to indicate which tool blobs are present.
 */
message HasToolBlobsResponse {
	repeated ToolBlobExistence existence = 1;
}

/** 
 * Sent by a client to write a chunk of data for a
 * tool blob that the worker does not already have.
 */
message WriteToolBlobRequest {
	oneof initialOrSubsequent {
		int64 toolBlobXxHash64 = 1;
		int64 offset = 2;
	}
	bool finishWrite = 3;
	bytes data = 10;
}

/**
 * Sent by a worker *after* a WriteToolBlobRequest
 * with "finishWrite" set to true is sent, to
 * indicate that the worker has saved the tool
 * blob to it's storage.
 */
message WriteToolBlobResponse {
	int64 committedSize = 1;
}

/**
 * Sent by a client to constructs a tool on the
 * worker from one or more tool blobs with the 
 * specified file layout.
 */
message ConstructToolRequest {
	int64 toolXxHash64 = 1;
	map<int64, string> toolBlobXxHash64ToUnixRelativePath = 2;
}

/**
 * Sent by a worker once the tool has been constructed 
 * (i.e. the worker has stored how this tool should be
 * laid out on disk when needed for future executions).
 */
message ConstructToolResponse {
	int64 toolXxHash64 = 1;
}

/**
 * Sent by a client to query which (non-tool) blobs it
 * has in storage.
 */
message QueryMissingBlobsRequest {
	repeated int64 blobXxHash64 = 1;
}

/**
 * Sent by a worker to indicate the blobs that it is
 * missing.
 */
message QueryMissingBlobsResponse {
	repeated int64 blobXxHash64 = 1;
}

/**
 * Sent by a client to start or continue sending a compressed
 * ZIP file of missing blobs to a worker.
 */
message SendCompressedBlobsRequest {
	int64 offset = 1;
	bool finishWrite = 2;
	bytes data = 10;
}

/**
 * Sent by a worker *after* a SendCompressedBlobsRequest
 * with "finishWrite" set to true, and the compressed ZIP
 * has been expanded and blobs stored to disk on the worker.
 */
message SendCompressedBlobsResponse {
}

/**
 * Sent by a client after:
 *
 * 1. the core has been reserved,
 * 2. the tool blobs have been synced, and
 * 3. all non-tool blobs have been sent
 *
 * to actually execute the task on the worker.
 */
message ExecuteTaskRequest {
	TaskDescriptor descriptor = 1;
}

/**
 * Sent by the worker as the task is executed. Once the 
 * worker has sent a ProcessResponse with the exit code
 * set, the client can then either:
 *
 * - sync more tool blobs
 * - sync more non-tool blobs
 * - execute more tasks
 * - close the streaming call to unreserve the core
 *
 * The core is not unreserved on the worker until the
 * client disconnects (either intentionally or otherwise).
 */
message ExecuteTaskResponse {
	ProcessResponse response = 1;
}

/** 
 * Encapsulates all of the requests that a client could send.
 */
message ExecutionRequest {
	oneof request {
		ReserveCoreRequest reserveCore = 1;
		// (2) removed
		QueryToolRequest queryTool = 3;
		HasToolBlobsRequest hasToolBlobs = 4;
		WriteToolBlobRequest writeToolBlob = 5;
		ConstructToolRequest constructTool = 6;
		QueryMissingBlobsRequest queryMissingBlobs = 7;
		SendCompressedBlobsRequest sendCompressedBlobs = 8;
		ExecuteTaskRequest executeTask = 9;
	}
}

/**
 * Encapsulates all of the responses a worker could send.
 */
message ExecutionResponse {
	oneof response {
		ReserveCoreResponse reserveCore = 1;
		// (2) unused
		QueryToolResponse queryTool = 3;
		HasToolBlobsResponse hasToolBlobs = 4;
		WriteToolBlobResponse writeToolBlob = 5;
		ConstructToolResponse constructTool = 6;
		QueryMissingBlobsResponse queryMissingBlobs = 7;
		SendCompressedBlobsResponse sendCompressedBlobs = 8;
		ExecuteTaskResponse executeTask = 9;
	}
}

/**
 * The task API only uses streaming requests, because the 
 * server needs to know if the client disappears at any time
 * (including crashes) so it can unreserve cores.
 */
service TaskApi {
	/**
	 * Streaming call used by clients to reserve cores, sync
	 * data and execute tasks.
	 */
	rpc ReserveCoreAndExecute(stream ExecutionRequest) returns (stream ExecutionResponse) {}
}