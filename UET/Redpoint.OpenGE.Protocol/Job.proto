syntax = "proto3";

package Redpoint.OpenGE.Protocol;

message JobBuildBehaviour {
	bool forceRemotingForLocalWorker = 1;
}

message SubmitJobRequest {
	string buildNodeName = 1;
	string jobXml = 2;
	map<string, string> environmentVariables = 3;
	string workingDirectory = 4;
	JobBuildBehaviour buildBehaviour = 5;
}

enum JobCompletionStatus {
	JobCompletionUnknown = 0;
	JobCompletionSuccess = 1;
	JobCompletionFailure = 2;
}

message JobParsedResponse {
	int32 totalTasks = 1;
}

message TaskPreparingResponse {
	string id = 1;
	string displayName = 2;
	string operationDescription = 3;
	string workerMachineName = 4;
	int32 workerCoreNumber = 5;
}

message TaskPreparedResponse {
	string id = 1;
	string displayName = 2;
	double totalSeconds = 3;
	string operationCompletedDescription = 4;
}

enum TaskPhase {
	Initial = 0;
	RemoteToolSynchronisation = 1;
	RemoteInputBlobSynchronisation = 2;
	TaskExecution = 3;
	RemoteOutputBlobSynchronisation = 4;
}

message TaskStartedResponse {
	string id = 1;
	string displayName = 2;
	string workerMachineName = 3;
	int32 workerCoreNumber = 4;
	TaskPhase initialPhase = 5;
	int64 initialPhaseStartTimeUtcTicks = 6;
}

message TaskPhaseChangeResponse {
	string id = 1;
	string displayName = 2;
	TaskPhase newPhase = 3;
	int64 newPhaseStartTimeUtcTicks = 4;
	double totalSecondsInPreviousPhase = 5;
	map<string, string> previousPhaseMetadata = 6;
}

message TaskOutputResponse {
	string id = 1;
	oneof output {
		string standardOutputLine = 2;
		string standardErrorLine = 3;
	}
}

enum TaskCompletionStatus {
	TaskCompletionUnknown = 0;
	TaskCompletionSuccess = 1;
	TaskCompletionFailure = 2;
	TaskCompletionCancelled = 3;
	TaskCompletionException = 4;
}

message TaskCompletedResponse {
	string id = 1;
	TaskCompletionStatus status = 2;
	int32 exitCode = 3;
	string exceptionMessage = 4;
	double totalSeconds = 5;
	string displayName = 6;
	int64 finalPhaseEndTimeUtcTicks = 7;
	double totalSecondsInPreviousPhase = 8;
	map<string, string> previousPhaseMetadata = 9;
}

message JobCompleteResponse {
	JobCompletionStatus status = 1;
	double totalSeconds = 2;
	string exceptionMessage = 3;
}

message JobResponse {
	oneof response {
		JobParsedResponse jobParsed = 1;
		TaskStartedResponse taskStarted = 2;
		TaskOutputResponse taskOutput = 3;
		TaskCompletedResponse taskCompleted = 4;
		JobCompleteResponse jobComplete = 5;
		TaskPreparingResponse taskPreparing = 6;
		TaskPreparedResponse taskPrepared = 7;
		TaskPhaseChangeResponse taskPhaseChange = 8;
	}
}

message PingJobServiceRequest {
}

message PingJobServiceResponse {
}

service JobApi {
	rpc PingJobService(PingJobServiceRequest) returns (PingJobServiceResponse) {}
	rpc SubmitJob(SubmitJobRequest) returns (stream JobResponse) {}
}