<?xml version='1.0' ?>
<BuildGraph xmlns="http://www.epicgames.com/BuildGraph" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.epicgames.com/BuildGraph ./Schema.xsd" >

  <!-- Environment options -->
  <Option Name="UETPath" DefaultValue="" Description="Path to the UET binary" />
  <Option Name="EnginePath" Restrict=".*" DefaultValue="" Description="Path to the engine" />
  <Option Name="TempPath" Restrict=".*" DefaultValue="" Description="Path to the temporary directory (must not contain spaces)" />
  <Option Name="ProjectRoot" Restrict=".*" DefaultValue="" Description="Path to the directory that contains the .uproject" />
  <Option Name="RepositoryRoot" Restrict=".*" DefaultValue="" Description="Path to the directory that contains all the project folders and BuildScriptsExtra" />

  <!-- General options -->
  <Option Name="UProjectPath" Restrict=".*" DefaultValue="" Description="Path to the .uproject file" />
  <Option Name="Distribution" Restrict=".*" DefaultValue="" Description="The distribution being built" />
  <Option Name="IsUnrealEngine5" Restrict="true|false" DefaultValue="false" Description="If true, this is an Unreal Engine 5 project" />

  <!-- Prepare options -->
  <Option Name="PrepareCustomCompileScripts" DefaultValue="" Description="Semicolon separated list of custom prepare scripts to run before compile" />

  <!-- Build options -->
  <Option Name="ExecuteBuild" Restrict="true|false" DefaultValue="true" Description="Whether the build steps should be executed" />
  <Option Name="EditorTarget" Restrict="[^ ]+" DefaultValue="UnrealEditor" Description="Name of the editor target to be built" />
  <Option Name="GameTargets" Restrict="[^ ]*" DefaultValue="UnrealGame" Description="List of game targets to build, e.g. UnrealGame" />
  <Option Name="ClientTargets" Restrict="[^ ]*" DefaultValue="UnrealClient" Description="List of client targets to build, e.g. UnrealClient" />
  <Option Name="ServerTargets" Restrict="[^ ]*" DefaultValue="UnrealServer" Description="List of server targets to build, e.g. UnrealServer" />
  <Option Name="GameTargetPlatforms" Restrict="[^ ]*" DefaultValue="Win64" Description="List of the game target platforms to build for, separated by semicolons, eg. Win64;Win32;Android"/>
  <Option Name="ClientTargetPlatforms" Restrict="[^ ]*" DefaultValue="" Description="List of the client target platforms to build for, separated by semicolons, eg. Win64;Win32;Android"/>
  <Option Name="ServerTargetPlatforms" Restrict="[^ ]*" DefaultValue="" Description="List of the server target platforms to build for, separated by semicolons, eg. Win64;Win32;Android"/>
  <Option Name="GameConfigurations" Restrict="[^ ]*" DefaultValue="Development" Description="List of configurations to build the game targets for, e.g. Development;Shipping" />
  <Option Name="ClientConfigurations" Restrict="[^ ]*" DefaultValue="Development" Description="List of configurations to build the client targets for, e.g. Development;Shipping" />
  <Option Name="ServerConfigurations" Restrict="[^ ]*" DefaultValue="Development" Description="List of configurations to build the server targets for, e.g. Development;Shipping" />
  <Option Name="MacPlatforms" Restrict="[^ ]*" DefaultValue="Mac;IOS" Description="List of platforms that macOS agents should build instead of Windows, e.g. Mac;IOS" />
  <Option Name="StrictIncludes" Restrict="true|false" DefaultValue="false" Description="If enabled, builds with strict includes turned on (must pass strict include checks for Marketplace submission)" />

  <!-- Stage options -->
  <Option Name="StageDirectory" Restrict=".+" DefaultValue="Saved\StagedBuilds" Description="The path under which to place all of the staged builds" />

  <!-- Test options -->
  <Option Name="ExecuteTests" Restrict="true|false" DefaultValue="true" Description="Whether the tests should be executed" />
  <Option Name="GauntletTests" DefaultValue="" Description="An array of Gauntlet tests formatted like so: Name1|#GameBinaries_ExampleOSS_Win64_DebugGame;#ServerBinaries_ExampleOSSServer_Win64_DebugGame+Name2|#GameBinaries_ExampleOSS_IOS_DebugGame" />
  <Option Name="CustomTests" DefaultValue="" Description="An array of custom tests formatted like so: Name1~PathToScript1.ps1+Name2~PathToScript2.ps1" />

  <!-- Deployment options -->
  <Option Name="DeploymentSteam" DefaultValue="" Description="An array of Steam deployments to run formatted like so: Win64 Steam;true;Game;ExampleOSS;Win64;DebugGame;1382480;1382481;eostesting+Mac Steam;true;Game;ExampleOSS;Mac;DebugGame;1382480;1382482;eostesting" />
  <Option Name="DeploymentCustom" DefaultValue="" Description="An array of custom deployments to run formatted like so: Win64 Custom;true;Game;ExampleOSS;Win64;DebugGame+Mac Custom;true;Game;ExampleOSS;Mac;DebugGame" />

  <!-- Dynamic include options, used by UET to dynamically generate test and deployment nodes -->
  <Option Name="ScriptIncludes" DefaultValue="" Description="Additional script includes paths" />
  <Include Script="$(ScriptIncludes)" />

  <EnvVar Name="AppData" />
  <EnvVar Name="HOME" />

  <Property Name="GameBinaries" Value="" />
  <Property Name="ClientBinaries" Value="" />
  <Property Name="ServerBinaries" Value="" />
  <Property Name="GameCookedContent" Value="" />
  <Property Name="ClientCookedContent" Value="" />
  <Property Name="ServerCookedContent" Value="" />
  <Property Name="GameStaged" Value="" />
  <Property Name="ClientStaged" Value="" />
  <Property Name="ServerStaged" Value="" />
  <Property Name="GauntletTasks" Value="" />
  <Property Name="CustomTasks" Value="" />
  <Property Name="DeploymentTasks" Value="" />
  <Property Name="AdditionalArguments" Value="" If="'$(StrictIncludes)' == 'false'" />
  <Property Name="AdditionalArguments" Value=" -NoPCH -NoSharedPCH -DisableUnity" If="'$(StrictIncludes)' == 'true'" />

  <!-- Targets that we will execute on a Windows machine. -->
  <Agent Name="Windows Build" Type="Win64" If="'$(ExecuteBuild)' == 'true'">

    <!-- Compile the editor for Windows (necessary for cook later) -->
    <Node Name="Compile $(EditorTarget) Win64" Produces="#EditorBinaries">
      <ForEach Name="PrepareCustomCompileScript" Values="$(PrepareCustomCompileScripts)">
        <Spawn Exe="powershell.exe" Arguments="-ExecutionPolicy Bypass &quot;$(RepositoryRoot)\$(PrepareCustomCompileScript)&quot;" />
      </ForEach>
      <Compile Target="$(EditorTarget)" Platform="Win64" Configuration="Development" Tag="#EditorBinaries" Arguments="-Project=&quot;$(UProjectPath)&quot; $(AdditionalArguments)" AllowParallelExecutor="false" />
    </Node>

    <!-- Compile the game (targeting the Game target, not Client) -->
    <ForEach Name="TargetName" Values="$(GameTargets)">
      <ForEach Name="TargetPlatform" Values="$(GameTargetPlatforms)">
        <ForEach Name="TargetConfiguration" Values="$(GameConfigurations)">
          <Node Name="Compile $(TargetName) $(TargetPlatform) $(TargetConfiguration)" Produces="#GameBinaries_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)" If="!ContainsItem('$(MacPlatforms)', '$(TargetPlatform)', ';')">
            <ForEach Name="PrepareCustomCompileScript" Values="$(PrepareCustomCompileScripts)">
              <Spawn Exe="powershell.exe" Arguments="-ExecutionPolicy Bypass &quot;$(RepositoryRoot)\$(PrepareCustomCompileScript)&quot;" />
            </ForEach>
            <Compile Target="$(TargetName)" Platform="$(TargetPlatform)" Configuration="$(TargetConfiguration)" Tag="#GameBinaries_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)" Arguments="-Project=&quot;$(UProjectPath)&quot; $(AdditionalArguments)"/>
            <Tag Files="#GameBinaries_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)" Filter="*.target" With="#GameReceipts_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)"/>
			      <SanitizeReceipt Files="#GameReceipts_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)" />
          </Node>
          <Property Name="GameBinaries" Value="$(GameBinaries)#GameBinaries_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration);"/>
        </ForEach>
      </ForEach>
    </ForEach>

    <!-- Compile the client (targeting the Client target, not Game) -->
    <ForEach Name="TargetName" Values="$(ClientTargets)">
      <ForEach Name="TargetPlatform" Values="$(ClientTargetPlatforms)">
        <ForEach Name="TargetConfiguration" Values="$(ClientConfigurations)">
          <Node Name="Compile $(TargetName) $(TargetPlatform) $(TargetConfiguration)" Produces="#ClientBinaries_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)" If="!ContainsItem('$(MacPlatforms)', '$(TargetPlatform)', ';')">
            <ForEach Name="PrepareCustomCompileScript" Values="$(PrepareCustomCompileScripts)">
              <Spawn Exe="powershell.exe" Arguments="-ExecutionPolicy Bypass &quot;$(RepositoryRoot)\$(PrepareCustomCompileScript)&quot;" />
            </ForEach>
            <Compile Target="$(TargetName)" Platform="$(TargetPlatform)" Configuration="$(TargetConfiguration)" Tag="#ClientBinaries_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)" Arguments="-Project=&quot;$(UProjectPath)&quot; $(AdditionalArguments)"/>
            <Tag Files="#ClientBinaries_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)" Filter="*.target" With="#ClientReceipts_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)"/>
			      <SanitizeReceipt Files="#ClientReceipts_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)" />
          </Node>
          <Property Name="ClientBinaries" Value="$(ClientBinaries)#ClientBinaries_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration);"/>
        </ForEach>
      </ForEach>
    </ForEach>

    <!-- Compile the dedicated server -->
    <ForEach Name="TargetName" Values="$(ServerTargets)">
      <ForEach Name="TargetPlatform" Values="$(ServerTargetPlatforms)">
        <ForEach Name="TargetConfiguration" Values="$(ServerConfigurations)">
          <Node Name="Compile $(TargetName) $(TargetPlatform) $(TargetConfiguration)" Produces="#ServerBinaries_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)" If="!ContainsItem('$(MacPlatforms)', '$(TargetPlatform)', ';')">
            <ForEach Name="PrepareCustomCompileScript" Values="$(PrepareCustomCompileScripts)">
              <Spawn Exe="powershell.exe" Arguments="-ExecutionPolicy Bypass &quot;$(RepositoryRoot)\$(PrepareCustomCompileScript)&quot;" />
            </ForEach>
            <Compile Target="$(TargetName)" Platform="$(TargetPlatform)" Configuration="$(TargetConfiguration)" Tag="#ServerBinaries_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)" Arguments="-Project=&quot;$(UProjectPath)&quot; $(AdditionalArguments)"/>
            <Tag Files="#ServerBinaries_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)" Filter="*.target" With="#ServerReceipts_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)"/>
			      <SanitizeReceipt Files="#ServerReceipts_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)" />
          </Node>
          <Property Name="ServerBinaries" Value="$(ServerBinaries)#ServerBinaries_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration);"/>
        </ForEach>
      </ForEach>
    </ForEach>

  </Agent>

  <!-- Targets that we will execute on a macOS machine. -->
  <Agent Name="macOS Build" Type="Mac" If="'$(ExecuteBuild)' == 'true'">

    <!-- Compile the game (targeting the Game target, not Client) -->
    <ForEach Name="TargetName" Values="$(GameTargets)">
      <ForEach Name="TargetPlatform" Values="$(GameTargetPlatforms)">
        <ForEach Name="TargetConfiguration" Values="$(GameConfigurations)">
          <Node Name="Compile $(TargetName) $(TargetPlatform) $(TargetConfiguration)" Produces="#GameBinaries_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)" If="ContainsItem('$(MacPlatforms)', '$(TargetPlatform)', ';')">
            <ForEach Name="PrepareCustomCompileScript" Values="$(PrepareCustomCompileScripts)">
              <Spawn Exe="pwsh" Arguments="-ExecutionPolicy Bypass '$(RepositoryRoot)/$(PrepareCustomCompileScript)'" />
            </ForEach>
            <Compile Target="$(TargetName)" Platform="$(TargetPlatform)" Configuration="$(TargetConfiguration)" Tag="#GameBinaries_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)" Arguments="-Project=&quot;$(UProjectPath)&quot; $(AdditionalArguments)"/>
            <Tag Files="#GameBinaries_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)" Filter="*.target" With="#GameReceipts_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)"/>
			      <SanitizeReceipt Files="#GameReceipts_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)" />
          </Node>
          <Property Name="GameBinaries" Value="$(GameBinaries)#GameBinaries_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration);"/>
        </ForEach>
      </ForEach>
    </ForEach>

    <!-- Compile the client (targeting the Client target, not Game) -->
    <ForEach Name="TargetName" Values="$(ClientTargets)">
      <ForEach Name="TargetPlatform" Values="$(ClientTargetPlatforms)">
        <ForEach Name="TargetConfiguration" Values="$(ClientConfigurations)">
          <Node Name="Compile $(TargetName) $(TargetPlatform) $(TargetConfiguration)" Produces="#ClientBinaries_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)" If="ContainsItem('$(MacPlatforms)', '$(TargetPlatform)', ';')">
            <ForEach Name="PrepareCustomCompileScript" Values="$(PrepareCustomCompileScripts)">
              <Spawn Exe="pwsh" Arguments="-ExecutionPolicy Bypass '$(RepositoryRoot)/$(PrepareCustomCompileScript)'" />
            </ForEach>
            <Compile Target="$(TargetName)" Platform="$(TargetPlatform)" Configuration="$(TargetConfiguration)" Tag="#ClientBinaries_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)" Arguments="-Project=&quot;$(UProjectPath)&quot; $(AdditionalArguments)"/>
            <Tag Files="#ClientBinaries_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)" Filter="*.target" With="#ClientReceipts_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)"/>
			      <SanitizeReceipt Files="#ClientReceipts_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)" />
          </Node>
          <Property Name="ClientBinaries" Value="$(ClientBinaries)#ClientBinaries_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration);"/>
        </ForEach>
      </ForEach>
    </ForEach>

    <!-- Compile the dedicated server -->
    <ForEach Name="TargetName" Values="$(ServerTargets)">
      <ForEach Name="TargetPlatform" Values="$(ServerTargetPlatforms)">
        <ForEach Name="TargetConfiguration" Values="$(ServerConfigurations)">
          <Node Name="Compile $(TargetName) $(TargetPlatform) $(TargetConfiguration)" Produces="#ServerBinaries_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)" If="ContainsItem('$(MacPlatforms)', '$(TargetPlatform)', ';')">
            <ForEach Name="PrepareCustomCompileScript" Values="$(PrepareCustomCompileScripts)">
              <Spawn Exe="pwsh" Arguments="-ExecutionPolicy Bypass '$(RepositoryRoot)/$(PrepareCustomCompileScript)'" />
            </ForEach>
            <Compile Target="$(TargetName)" Platform="$(TargetPlatform)" Configuration="$(TargetConfiguration)" Tag="#ServerBinaries_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)" Arguments="-Project=&quot;$(UProjectPath)&quot; $(AdditionalArguments)"/>
            <Tag Files="#ServerBinaries_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)" Filter="*.target" With="#ServerReceipts_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)"/>
			      <SanitizeReceipt Files="#ServerReceipts_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)" />
          </Node>
          <Property Name="ServerBinaries" Value="$(ServerBinaries)#ServerBinaries_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration);"/>
        </ForEach>
      </ForEach>
    </ForEach>

    <!-- We do not cook on macOS, leave it up to the Windows agents for that. -->

  </Agent>

  <!-- Targets that we will execute on a Linux machine. -->
  <Agent Name="Linux" Type="Linux" If="'$(ExecuteBuild)' == 'true'">

  </Agent>

  <!-- Targets that we will execute on a Windows machine. -->
  <Agent Name="Windows Cook" Type="Win64" If="'$(ExecuteBuild)' == 'true'">

    <!-- Cook for game platforms (targeting the Game target, not Client) -->
    <ForEach Name="TargetPlatform" Values="$(GameTargetPlatforms)">
      <Node Name="Cook Game $(TargetPlatform)" Requires="#EditorBinaries" Produces="#GameCookedContent_$(TargetPlatform)">
        <Property Name="CookPlatform" Value="$(TargetPlatform)" />
        <Property Name="CookPlatform" Value="Windows" If="'$(CookPlatform)' == 'Win64'" />
        <Property Name="CookPlatform" Value="$(CookPlatform)NoEditor" If="(('$(CookPlatform)' == 'Windows') or ('$(CookPlatform)' == 'Mac') or ('$(CookPlatform)' == 'Linux')) and ('$(IsUnrealEngine5)' == 'false')" />
        <Cook Project="$(UProjectPath)" Platform="$(CookPlatform)" Tag="#GameCookedContent_$(TargetPlatform)" />
      </Node>
      <Property Name="GameCookedContent" Value="$(GameCookedContent)#GameCookedContent_$(TargetPlatform);"/>
    </ForEach>

    <!-- Cook for client platforms (targeting the Client target, not Game) -->
    <ForEach Name="TargetPlatform" Values="$(ClientTargetPlatforms)">
      <Node Name="Cook Client $(TargetPlatform)" Requires="#EditorBinaries" Produces="#ClientCookedContent_$(TargetPlatform)">
        <Property Name="CookPlatform" Value="$(TargetPlatform)" />
        <Property Name="CookPlatform" Value="Windows" If="'$(CookPlatform)' == 'Win64'" />
        <Property Name="CookPlatform" Value="$(CookPlatform)NoEditor" If="(('$(CookPlatform)' == 'Windows') or ('$(CookPlatform)' == 'Mac') or ('$(CookPlatform)' == 'Linux')) and ('$(IsUnrealEngine5)' == 'false')" />
        <Property Name="CookPlatform" Value="$(CookPlatform)Client" If="(('$(CookPlatform)' == 'Windows') or ('$(CookPlatform)' == 'Mac') or ('$(CookPlatform)' == 'Linux')) and ('$(IsUnrealEngine5)' == 'true')" />
        <Cook Project="$(UProjectPath)" Platform="$(CookPlatform)" Tag="#ClientCookedContent_$(TargetPlatform)" />
      </Node>
      <Property Name="ClientCookedContent" Value="$(ClientCookedContent)#ClientCookedContent_$(TargetPlatform);"/>
    </ForEach>

    <!-- Cook for dedicated servers -->
    <ForEach Name="TargetPlatform" Values="$(ServerTargetPlatforms)">
      <Node Name="Cook Server $(TargetPlatform)" Requires="#EditorBinaries" Produces="#ServerCookedContent_$(TargetPlatform)">
        <Property Name="CookPlatform" Value="$(TargetPlatform)" />
        <Property Name="CookPlatform" Value="Windows" If="'$(CookPlatform)' == 'Win64'" />
        <Property Name="CookPlatform" Value="$(CookPlatform)Server" If="('$(CookPlatform)' == 'Windows') or ('$(CookPlatform)' == 'Mac') or ('$(CookPlatform)' == 'Linux')" />
        <Cook Project="$(UProjectPath)" Platform="$(CookPlatform)" Tag="#ServerCookedContent_$(TargetPlatform)" />
      </Node>
      <Property Name="ServerCookedContent" Value="$(ServerCookedContent)#ServerCookedContent_$(TargetPlatform);"/>
    </ForEach>

  </Agent>

  <!-- Targets that we will execute on a Windows machine. -->
  <Agent Name="Windows Pak and Stage" Type="Win64" If="'$(ExecuteBuild)' == 'true'">

    <!-- Pak and stage the game (targeting the Game target, not Client) -->
    <ForEach Name="TargetName" Values="$(GameTargets)">
      <ForEach Name="TargetPlatform" Values="$(GameTargetPlatforms)">
        <ForEach Name="TargetConfiguration" Values="$(GameConfigurations)">
          <Node Name="Pak and Stage $(TargetName) $(TargetPlatform) $(TargetConfiguration)" Requires="#GameBinaries_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration);#GameCookedContent_$(TargetPlatform)" Produces="#GameStaged_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)"  If="!ContainsItem('$(MacPlatforms)', '$(TargetPlatform)', ';')">
            <Property Name="StagePlatform" Value="$(TargetPlatform)" />
            <Property Name="StagePlatform" Value="Windows" If="'$(StagePlatform)' == 'Win64'" />
            <Property Name="StagePlatform" Value="$(StagePlatform)NoEditor" If="(('$(StagePlatform)' == 'Windows') or ('$(StagePlatform)' == 'Mac') or ('$(StagePlatform)' == 'Linux')) and ('$(IsUnrealEngine5)' == 'false')" />
            <Property Name="DisableCodeSign" Value="" />
            <Property Name="DisableCodeSign" Value="-NoCodeSign" If="('$(TargetPlatform)' == 'Win64') or ('$(TargetPlatform)' == 'Mac') or ('$(TargetPlatform)' == 'Linux')" />
            <Property Name="PackageFlag" Value="" />
            <Property Name="PackageFlag" Value="-package" If="('$(TargetPlatform)' == 'IOS') or ('$(TargetPlatform)' == 'Android')" />
            <Command Name="BuildCookRun" Arguments="&quot;-project=$(UProjectPath)&quot; -nop4 $(DisableCodeSign) &quot;-platform=$(TargetPlatform)&quot; &quot;-clientconfig=$(TargetConfiguration)&quot; -SkipCook -cook -pak $(PackageFlag) -stage &quot;-stagingdirectory=$(StageDirectory)&quot; -unattended -stdlog" />
            <Tag BaseDir="$(StageDirectory)\$(StagePlatform)" Files="..." With="#GameStaged_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)" />
            <Tag BaseDir="$(ProjectRoot)\Binaries\$(TargetPlatform)" Files="..." With="#GameStaged_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)" If="('$(TargetPlatform)' == 'Android') or ('$(TargetPlatform)' == 'IOS')" />
          </Node>
          <Property Name="GameStaged" Value="$(GameStaged)#GameStaged_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration);"  If="!ContainsItem('$(MacPlatforms)', '$(TargetPlatform)', ';')" />
        </ForEach>
      </ForEach>
    </ForEach>

    <!-- Pak and stage the client (targeting the Client target, not Game) -->
    <ForEach Name="TargetName" Values="$(ClientTargets)">
      <ForEach Name="TargetPlatform" Values="$(ClientTargetPlatforms)">
        <ForEach Name="TargetConfiguration" Values="$(ClientConfigurations)">
          <Node Name="Pak and Stage $(TargetName) $(TargetPlatform) $(TargetConfiguration)" Requires="#ClientBinaries_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration);#ClientCookedContent_$(TargetPlatform)" Produces="#ClientStaged_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)" If="!ContainsItem('$(MacPlatforms)', '$(TargetPlatform)', ';')">
            <Property Name="StagePlatform" Value="$(TargetPlatform)" />
            <Property Name="StagePlatform" Value="Windows" If="'$(StagePlatform)' == 'Win64'" />
            <Property Name="StagePlatform" Value="$(StagePlatform)NoEditor" If="(('$(StagePlatform)' == 'Windows') or ('$(StagePlatform)' == 'Mac') or ('$(StagePlatform)' == 'Linux')) and ('$(IsUnrealEngine5)' == 'false')" />
            <Property Name="DisableCodeSign" Value="" />
            <Property Name="DisableCodeSign" Value="-NoCodeSign" If="('$(TargetPlatform)' == 'Win64') or ('$(TargetPlatform)' == 'Mac') or ('$(TargetPlatform)' == 'Linux')" />
            <Property Name="PackageFlag" Value="" />
            <Property Name="PackageFlag" Value="-package" If="('$(TargetPlatform)' == 'IOS') or ('$(TargetPlatform)' == 'Android')" />
            <Command Name="BuildCookRun" Arguments="&quot;-project=$(UProjectPath)&quot; -nop4 $(DisableCodeSign) &quot;-platform=$(TargetPlatform)&quot; &quot;-clientconfig=$(TargetConfiguration)&quot; -SkipCook -cook -pak $(PackageFlag) -stage &quot;-stagingdirectory=$(StageDirectory)&quot; -unattended -stdlog" />
            <Tag BaseDir="$(StageDirectory)\$(StagePlatform)" Files="..." With="#ClientStaged_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)" />
            <Tag BaseDir="$(ProjectRoot)\Binaries\$(TargetPlatform)" Files="..." With="#ClientStaged_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)" If="('$(TargetPlatform)' == 'Android') or ('$(TargetPlatform)' == 'IOS')" />
          </Node>
          <Property Name="ClientStaged" Value="$(ClientStaged)#ClientStaged_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration);" If="!ContainsItem('$(MacPlatforms)', '$(TargetPlatform)', ';')" />
        </ForEach>
      </ForEach>
    </ForEach>

    <!-- Pak and stage the dedicated server -->
    <ForEach Name="TargetName" Values="$(ServerTargets)">
      <ForEach Name="TargetPlatform" Values="$(ServerTargetPlatforms)">
        <ForEach Name="TargetConfiguration" Values="$(ServerConfigurations)">
          <Node Name="Pak and Stage $(TargetName) $(TargetPlatform) $(TargetConfiguration)" Requires="#ServerBinaries_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration);#ServerCookedContent_$(TargetPlatform)"  Produces="#ServerStaged_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)" If="!ContainsItem('$(MacPlatforms)', '$(TargetPlatform)', ';')">
            <Property Name="StagePlatform" Value="$(TargetPlatform)" />
            <Property Name="StagePlatform" Value="Windows" If="'$(StagePlatform)' == 'Win64'" />
            <Property Name="StagePlatform" Value="$(StagePlatform)Server" If="('$(StagePlatform)' == 'Windows') or ('$(StagePlatform)' == 'Mac') or ('$(StagePlatform)' == 'Linux')" />
            <Property Name="DisableCodeSign" Value="" />
            <Property Name="DisableCodeSign" Value="-NoCodeSign" If="('$(TargetPlatform)' == 'Win64') or ('$(TargetPlatform)' == 'Mac') or ('$(TargetPlatform)' == 'Linux')" />
            <Command Name="BuildCookRun" Arguments="&quot;-project=$(UProjectPath)&quot; -nop4 $(DisableCodeSign) -dedicatedserver -noclient &quot;-serverplatform=$(TargetPlatform)&quot; -server &quot;-serverconfig=$(TargetConfiguration)&quot; -SkipCook -cook -pak -stage &quot;-stagingdirectory=$(StageDirectory)&quot; -unattended -stdlog" />
            <Tag BaseDir="$(StageDirectory)\$(StagePlatform)" Files="..." With="#ServerStaged_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)" />
          </Node>
          <Property Name="ServerStaged" Value="$(ServerStaged)#ServerStaged_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration);" If="!ContainsItem('$(MacPlatforms)', '$(TargetPlatform)', ';')" />
        </ForEach>
      </ForEach>
    </ForEach>

  </Agent>

  <!-- Targets that we will execute on a macOS machine. -->
  <Agent Name="macOS Pak and Stage" Type="Mac" If="'$(ExecuteBuild)' == 'true'">

    <!-- Pak and stage the game (targeting the Game target, not Client) -->
    <ForEach Name="TargetName" Values="$(GameTargets)">
      <ForEach Name="TargetPlatform" Values="$(GameTargetPlatforms)">
        <ForEach Name="TargetConfiguration" Values="$(GameConfigurations)">
          <Node Name="Pak and Stage $(TargetName) $(TargetPlatform) $(TargetConfiguration)" Requires="#GameBinaries_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration);#GameCookedContent_$(TargetPlatform)" Produces="#GameStaged_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)" If="ContainsItem('$(MacPlatforms)', '$(TargetPlatform)', ';')">
            <Property Name="StagePlatform" Value="$(TargetPlatform)" />
            <Property Name="StagePlatform" Value="Windows" If="'$(StagePlatform)' == 'Win64'" />
            <Property Name="StagePlatform" Value="$(StagePlatform)NoEditor" If="(('$(StagePlatform)' == 'Windows') or ('$(StagePlatform)' == 'Mac') or ('$(StagePlatform)' == 'Linux')) and ('$(IsUnrealEngine5)' == 'false')" />
            <Property Name="DisableCodeSign" Value="" />
            <Property Name="DisableCodeSign" Value="-NoCodeSign" If="('$(TargetPlatform)' == 'Win64') or ('$(TargetPlatform)' == 'Mac') or ('$(TargetPlatform)' == 'Linux')" />
            <Property Name="PackageFlag" Value="" />
            <Property Name="PackageFlag" Value="-package" If="('$(TargetPlatform)' == 'IOS') or ('$(TargetPlatform)' == 'Android')" />
            <Command Name="BuildCookRun" Arguments="&quot;-project=$(UProjectPath)&quot; -nop4 $(DisableCodeSign) &quot;-platform=$(TargetPlatform)&quot; &quot;-clientconfig=$(TargetConfiguration)&quot; -SkipCook -cook -pak $(PackageFlag) -stage &quot;-stagingdirectory=$(StageDirectory)&quot; -unattended -stdlog" />
            <Tag BaseDir="$(StageDirectory)/$(StagePlatform)" Files="..." With="#GameStaged_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)" />
            <Tag BaseDir="$(ProjectRoot)/Binaries/$(TargetPlatform)" Files="..." With="#GameStaged_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)" If="('$(TargetPlatform)' == 'Android') or ('$(TargetPlatform)' == 'IOS')" />
          </Node>
          <Property Name="GameStaged" Value="$(GameStaged)#GameStaged_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration);" If="ContainsItem('$(MacPlatforms)', '$(TargetPlatform)', ';')"/>
        </ForEach>
      </ForEach>
    </ForEach>

    <!-- Pak and stage the client (targeting the Client target, not Game) -->
    <ForEach Name="TargetName" Values="$(ClientTargets)">
      <ForEach Name="TargetPlatform" Values="$(ClientTargetPlatforms)">
        <ForEach Name="TargetConfiguration" Values="$(ClientConfigurations)">
          <Node Name="Pak and Stage $(TargetName) $(TargetPlatform) $(TargetConfiguration)" Requires="#ClientBinaries_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration);#ClientCookedContent_$(TargetPlatform)" Produces="#ClientStaged_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)" If="ContainsItem('$(MacPlatforms)', '$(TargetPlatform)', ';')">
            <Property Name="StagePlatform" Value="$(TargetPlatform)" />
            <Property Name="StagePlatform" Value="Windows" If="'$(StagePlatform)' == 'Win64'" />
            <Property Name="StagePlatform" Value="$(StagePlatform)NoEditor" If="(('$(CookPlatform)' == 'Windows') or ('$(CookPlatform)' == 'Mac') or ('$(CookPlatform)' == 'Linux')) and ('$(IsUnrealEngine5)' == 'false')" />
            <Property Name="DisableCodeSign" Value="" />
            <Property Name="DisableCodeSign" Value="-NoCodeSign" If="('$(TargetPlatform)' == 'Win64') or ('$(TargetPlatform)' == 'Mac') or ('$(TargetPlatform)' == 'Linux')" />
            <Property Name="PackageFlag" Value="" />
            <Property Name="PackageFlag" Value="-package" If="('$(TargetPlatform)' == 'IOS') or ('$(TargetPlatform)' == 'Android')" />
            <Command Name="BuildCookRun" Arguments="&quot;-project=$(UProjectPath)&quot; -nop4 $(DisableCodeSign) &quot;-platform=$(TargetPlatform)&quot; &quot;-clientconfig=$(TargetConfiguration)&quot; -SkipCook -cook -pak $(PackageFlag) -stage &quot;-stagingdirectory=$(StageDirectory)&quot; -unattended -stdlog" />
            <Tag BaseDir="$(StageDirectory)/$(StagePlatform)" Files="..." With="#ClientStaged_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)" />
            <Tag BaseDir="$(ProjectRoot)/Binaries/$(TargetPlatform)" Files="..." With="#ClientStaged_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)" If="('$(TargetPlatform)' == 'Android') or ('$(TargetPlatform)' == 'IOS')" />
          </Node>
          <Property Name="ClientStaged" Value="$(ClientStaged)#ClientStaged_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration);" If="ContainsItem('$(MacPlatforms)', '$(TargetPlatform)', ';')"/>
        </ForEach>
      </ForEach>
    </ForEach>

    <!-- Pak and stage the dedicated server -->
    <ForEach Name="TargetName" Values="$(ServerTargets)">
      <ForEach Name="TargetPlatform" Values="$(ServerTargetPlatforms)">
        <ForEach Name="TargetConfiguration" Values="$(ServerConfigurations)">
          <Node Name="Pak and Stage $(TargetName) $(TargetPlatform) $(TargetConfiguration)" Requires="#ServerBinaries_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration);#ServerCookedContent_$(TargetPlatform)"  Produces="#ServerStaged_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)" If="ContainsItem('$(MacPlatforms)', '$(TargetPlatform)', ';')">
            <Property Name="StagePlatform" Value="$(TargetPlatform)" />
            <Property Name="StagePlatform" Value="Windows" If="'$(StagePlatform)' == 'Win64'" />
            <Property Name="StagePlatform" Value="$(StagePlatform)Server" If="('$(StagePlatform)' == 'Windows') or ('$(StagePlatform)' == 'Mac') or ('$(StagePlatform)' == 'Linux')" />
            <Property Name="DisableCodeSign" Value="" />
            <Property Name="DisableCodeSign" Value="-NoCodeSign" If="('$(TargetPlatform)' == 'Win64') or ('$(TargetPlatform)' == 'Mac') or ('$(TargetPlatform)' == 'Linux')" />
            <Command Name="BuildCookRun" Arguments="&quot;-project=$(UProjectPath)&quot; -nop4 $(DisableCodeSign) -dedicatedserver -noclient &quot;-serverplatform=$(TargetPlatform)&quot; -server &quot;-serverconfig=$(TargetConfiguration)&quot; -SkipCook -cook -pak -stage &quot;-stagingdirectory=$(StageDirectory)&quot; -unattended -stdlog" />
            <Tag BaseDir="$(StageDirectory)/$(StagePlatform)" Files="..." With="#ServerStaged_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration)" />
          </Node>
          <Property Name="ServerStaged" Value="$(ServerStaged)#ServerStaged_$(TargetName)_$(TargetPlatform)_$(TargetConfiguration);" If="ContainsItem('$(MacPlatforms)', '$(TargetPlatform)', ';')"/>
        </ForEach>
      </ForEach>
    </ForEach>

  </Agent>

  <Agent Name="Windows Gauntlet" Type="Win64" If="'$(ExecuteTests)' == 'true'">

    <!-- Run all the defined Gauntlet tests when their dependencies are ready -->
    <ForEach Name="GauntletPairs" Values="$(GauntletTests)" Separator="+">
      <Property Name="GauntletTestName" Value="" />
      <Property Name="GauntletTestRequirements" Value="" />
      <ForEach Name="GauntletPair" Values="$(GauntletPairs)" Separator="~">
        <Switch>
          <Case If="'$(GauntletTestName)' == ''">
            <Property Name="GauntletTestName" Value="$(GauntletPair)" />
          </Case>
          <Default>
            <Property Name="GauntletTestRequirements" Value="$(GauntletPair)" />
          </Default>
        </Switch>
      </ForEach>
      <Node Name="Gauntlet $(GauntletTestName)" Requires="$(GauntletTestRequirements)" If="'$(ExecuteBuild)' == 'true'">
        <Spawn Exe="$(UETPath)" Arguments="internal run-gauntlet-test-from-buildgraph --engine-path &quot;$(EnginePath)&quot; --distribution &quot;$(Distribution)&quot; --test-name &quot;$(GauntletTestName)&quot;" />
      </Node>
      <Node Name="Gauntlet $(GauntletTestName)" If="'$(ExecuteBuild)' == 'false'">
        <Spawn Exe="$(UETPath)" Arguments="internal run-gauntlet-test-from-buildgraph --engine-path &quot;$(EnginePath)&quot; --distribution &quot;$(Distribution)&quot; --test-name &quot;$(GauntletTestName)&quot;" />
      </Node>
      <Property Name="GauntletTasks" Value="$(GauntletTasks)Gauntlet $(GauntletTestName);"/>
    </ForEach>

  </Agent>

  <Agent Name="Windows Test" Type="Win64" If="'$(ExecuteTests)' == 'true'">

    <!-- Run all the custom tests that target the test project -->
    <ForEach Name="CustomEntry" Values="$(CustomTests)" Separator="+">
      <Property Name="CustomTestName" Value="" />
      <Property Name="CustomTestScriptPath" Value="" />
      <ForEach Name="CustomEntryValue" Values="$(CustomEntry)" Separator="~">
        <Switch>
          <Case If="'$(CustomTestName)' == ''">
            <Property Name="CustomTestName" Value="$(CustomEntryValue)" />
          </Case>
          <Default>
            <Property Name="CustomTestScriptPath" Value="$(CustomEntryValue)" />
          </Default>
        </Switch>
      </ForEach>
      <Node 
        Name="Test $(CustomTestName)" 
        Requires="$(GameStaged);$(ClientStaged);$(ServerStaged)" 
      >
        <Spawn Exe="powershell.exe" Arguments="-ExecutionPolicy Bypass -File &quot;$(RepositoryRoot)\$(CustomTestScriptPath)&quot; -EnginePath &quot;$(EnginePath)&quot; -StageDirectory &quot;$(StageDirectory)&quot;" />
      </Node>
      <Property Name="CustomTasks" Value="$(CustomTasks)Test $(CustomTestName);" />
    </ForEach>

  </Agent>

  <Agent Name="Deployment" Type="Win64">

    <ForEach Name="Entry" Values="$(DeploymentSteam)" Separator="+">
      <Property Name="NodeName" Value="" />
      <Property Name="Manual" Value="" />
      <Property Name="PackageType" Value="" />
      <Property Name="PackageTarget" Value="" />
      <Property Name="PackagePlatform" Value="" />
      <Property Name="PackageConfiguration" Value="" />
      <Property Name="SteamAppID" Value="" />
      <Property Name="SteamDepotID" Value="" />
      <Property Name="SteamChannel" Value="" />
      <ForEach Name="EntryValue" Values="$(Entry)">
        <Switch>
          <Case If="'$(NodeName)' == ''">
            <Property Name="NodeName" Value="$(EntryValue)" />
          </Case>
          <Case If="'$(Manual)' == ''">
            <Property Name="Manual" Value="$(EntryValue)" />
          </Case>
          <Case If="'$(PackageType)' == ''">
            <Property Name="PackageType" Value="$(EntryValue)" />
          </Case>
          <Case If="'$(PackageTarget)' == ''">
            <Property Name="PackageTarget" Value="$(EntryValue)" />
          </Case>
          <Case If="'$(PackagePlatform)' == ''">
            <Property Name="PackagePlatform" Value="$(EntryValue)" />
          </Case>
          <Case If="'$(PackageConfiguration)' == ''">
            <Property Name="PackageConfiguration" Value="$(EntryValue)" />
          </Case>
          <Case If="'$(SteamAppID)' == ''">
            <Property Name="SteamAppID" Value="$(EntryValue)" />
          </Case>
          <Case If="'$(SteamDepotID)' == ''">
            <Property Name="SteamDepotID" Value="$(EntryValue)" />
          </Case>
          <Default>
            <Property Name="SteamChannel" Value="$(EntryValue)" />
          </Default>
        </Switch>
      </ForEach>
      <Property Name="ManualMode" Value="Auto" />
      <Property Name="ManualMode" Value="Manual" If="'$(Manual)' == 'true'" />

      <Node Name="Deploy $(ManualMode) $(NodeName)" Requires="#$(PackageType)Staged_$(PackageTarget)_$(PackagePlatform)_$(PackageConfiguration)">
        <Property Name="StagePlatform" Value="$(PackagePlatform)" />
        <Property Name="StagePlatform" Value="Windows" If="'$(StagePlatform)' == 'Win64'" />
        <Property Name="StagePlatform" Value="$(StagePlatform)NoEditor" If="('$(PackageType)' == 'Game' and ('$(StagePlatform)' == 'Windows') or ('$(StagePlatform)' == 'Mac') or ('$(StagePlatform)' == 'Linux')) and '$(IsUnrealEngine5)' == 'false'" />
        <Property Name="StagePlatform" Value="$(StagePlatform)Client" If="('$(PackageType)' == 'Client' and ('$(StagePlatform)' == 'Windows') or ('$(StagePlatform)' == 'Mac') or ('$(StagePlatform)' == 'Linux'))" />
        <Property Name="StagePlatform" Value="$(StagePlatform)Server" If="('$(PackageType)' == 'Server' and ('$(StagePlatform)' == 'Windows') or ('$(StagePlatform)' == 'Mac') or ('$(StagePlatform)' == 'Linux'))" />
        <Spawn Exe="$(UETPath)" Arguments="internal deploy --target steam --package-type &quot;$(PackageType)&quot; --package-target &quot;$(PackageTarget)&quot; --package-platform &quot;$(PackagePlatform)&quot; --package-configuration &quot;$(PackageConfiguration)&quot; --steam-app-id &quot;$(SteamAppID)&quot; --steam-depot-id &quot;$(SteamDepotID)&quot; --steam-channel &quot;$(SteamChannel)&quot; --staged-data &quot;$(StageDirectory)/$(StagePlatform)&quot;" />
      </Node>
      <Property Name="DeploymentTasks" Value="$(DeploymentTasks)Deploy $(ManualMode) $(NodeName);" />

    </ForEach>

    <ForEach Name="Entry" Values="$(DeploymentCustom)" Separator="+">
      <Property Name="NodeName" Value="" />
      <Property Name="Manual" Value="" />
      <Property Name="PackageType" Value="" />
      <Property Name="PackageTarget" Value="" />
      <Property Name="PackagePlatform" Value="" />
      <Property Name="PackageConfiguration" Value="" />
      <Property Name="CustomDeploymentScriptPath" Value="" />
      <ForEach Name="EntryValue" Values="$(Entry)">
        <Switch>
          <Case If="'$(NodeName)' == ''">
            <Property Name="NodeName" Value="$(EntryValue)" />
          </Case>
          <Case If="'$(Manual)' == ''">
            <Property Name="Manual" Value="$(EntryValue)" />
          </Case>
          <Case If="'$(PackageType)' == ''">
            <Property Name="PackageType" Value="$(EntryValue)" />
          </Case>
          <Case If="'$(PackageTarget)' == ''">
            <Property Name="PackageTarget" Value="$(EntryValue)" />
          </Case>
          <Case If="'$(PackagePlatform)' == ''">
            <Property Name="PackagePlatform" Value="$(EntryValue)" />
          </Case>
          <Case If="'$(PackageConfiguration)' == ''">
            <Property Name="PackageConfiguration" Value="$(EntryValue)" />
          </Case>
          <Default>
            <Property Name="CustomDeploymentScriptPath" Value="$(EntryValue)" />
          </Default>
        </Switch>
      </ForEach>
      <Property Name="ManualMode" Value="Auto" />
      <Property Name="ManualMode" Value="Manual" If="'$(Manual)' == 'true'" />

      <Node Name="Deploy $(ManualMode) $(NodeName)" Requires="#$(PackageType)Staged_$(PackageTarget)_$(PackagePlatform)_$(PackageConfiguration)">
        <Property Name="StagePlatform" Value="$(PackagePlatform)" />
        <Property Name="StagePlatform" Value="Windows" If="'$(StagePlatform)' == 'Win64'" />
        <Property Name="StagePlatform" Value="$(StagePlatform)NoEditor" If="('$(PackageType)' == 'Game' and ('$(StagePlatform)' == 'Windows') or ('$(StagePlatform)' == 'Mac') or ('$(StagePlatform)' == 'Linux')) and '$(IsUnrealEngine5)' == 'false'" />
        <Property Name="StagePlatform" Value="$(StagePlatform)Client" If="('$(PackageType)' == 'Client' and (('$(StagePlatform)' == 'Windows') or ('$(StagePlatform)' == 'Mac') or ('$(StagePlatform)' == 'Linux')))" />
        <Property Name="StagePlatform" Value="$(StagePlatform)Server" If="('$(PackageType)' == 'Server' and (('$(StagePlatform)' == 'Windows') or ('$(StagePlatform)' == 'Mac') or ('$(StagePlatform)' == 'Linux')))" />
        <Spawn Exe="powershell.exe" Arguments="-ExecutionPolicy Bypass -File &quot;$(RepositoryRoot)/$(CustomDeploymentScriptPath)&quot; -PackageType &quot;$(PackageType)&quot; -PackageTarget &quot;$(PackageTarget)&quot; -PackagePlatform &quot;$(PackagePlatform)&quot; -PackageConfiguration &quot;$(PackageConfiguration)&quot; -EnginePath &quot;$(EnginePath)&quot; -StageDirectory &quot;$(StageDirectory)&quot; -PackageDirectory &quot;$(StageDirectory)/$(StagePlatform)&quot;" />
      </Node>
      <Property Name="DeploymentTasks" Value="$(DeploymentTasks)Deploy $(ManualMode) $(NodeName);" />

    </ForEach>

  </Agent>

  <!-- Targets that we will execute on a Windows machine. -->
  <Agent Name="Windows Tag" Type="Win64">

    <!-- Node that we just use to easily execute all required nodes -->
    <Node Name="End" Requires="$(GameStaged);$(ClientStaged);$(ServerStaged);$(GauntletTasks);$(CustomTasks);$(DeploymentTasks)">
    </Node>

  </Agent>

</BuildGraph>
