namespace UET.Commands.Internal.SetFilterFile
{
    using Microsoft.Extensions.Logging;
    using System.CommandLine;
    using System.CommandLine.Invocation;
    using System.Threading.Tasks;

    internal class SetFilterFileCommand
    {
        internal class Options
        {
            public Option<string> PackageInclude;
            public Option<string> PackageExclude;
            public Option<string> OutputPath;

            public Options()
            {
                PackageInclude = new Option<string>("--package-include");
                PackageExclude = new Option<string>("--package-exclude");
                OutputPath = new Option<string>("--output-path");
            }
        }

        public static Command CreateSetFilterFileCommand()
        {
            var options = new Options();
            var command = new Command("set-filter-file");
            command.AddAllOptions(options);
            command.AddCommonHandler<SetFilterFileCommandInstance>(options);
            return command;
        }

        private class SetFilterFileCommandInstance : ICommandInstance
        {
            private readonly ILogger<SetFilterFileCommandInstance> _logger;
            private readonly Options _options;

            public SetFilterFileCommandInstance(
                ILogger<SetFilterFileCommandInstance> logger,
                Options options)
            {
                _logger = logger;
                _options = options;
            }

            public async Task<int> ExecuteAsync(InvocationContext context)
            {
                var packageInclude = context.ParseResult.GetValueForOption(_options.PackageInclude);
                var packageExclude = context.ParseResult.GetValueForOption(_options.PackageExclude);
                var outputPath = context.ParseResult.GetValueForOption(_options.OutputPath);

                var lines = new List<string>
                {
                    "[FilterPlugin]",
                    "; This file was automatically generated by the Unreal Engine Tool.",
                    "; Additional plugin includes:"
                };
                if (!string.IsNullOrWhiteSpace(packageInclude))
                {
                    foreach (var entry in packageInclude.Split(';'))
                    {
                        lines.Add(entry.Replace('\\', '/'));
                    }
                }
                lines.Add("; Additional plugin excludes:");
                if (!string.IsNullOrWhiteSpace(packageExclude))
                {
                    foreach (var entry in packageExclude.Split(';'))
                    {
                        lines.Add("-" + entry.Replace('\\', '/'));
                    }
                }

                Directory.CreateDirectory(Path.GetDirectoryName(outputPath)!);
                await File.WriteAllTextAsync(outputPath!, string.Join("\n", lines)).ConfigureAwait(false);
                return 0;
            }
        }
    }
}
